RFCトランス
プライバシーポリシー
お問い合わせ先
イチジク
テックスツーイー
8445
RFC 8445 - インタラクティブコネクティビティエスタブリッシュメント（ICE）。ネットワークアドレス変換器(NAT)トラバーサルのためのプロトコル 日本語訳
URL :https://tools.ietf.org/html/rfc8445
タイトル :RFC 8445 - インタラクティブコネクティビティエスタブリッシュメント（ICE）。ネットワークアドレス変換器(NAT)トラバーサルのためのプロトコル
翻訳編集 : 自動生成
インターネット技術タスクフォース（IETF） A. Keranen Request for Comments:8445 C. Holmberg Obsoletes: 5245 Ericsson Category:標準化トラック J. Rosenberg ISSN: 2070-1721 jdrosen.net 2018年7月号        
インタラクティブコネクティビティエスタブリッシュメント（ICE）。ネットワークアドレス変換器(NAT)トラバーサルのためのプロトコル

概要

本書は、UDPベースの通信におけるNAT（Network Address Translator）トラバーサルのためのプロトコルを記述したものである。このプロトコルはInteractive Connectivity Establishment (ICE)と呼ばれる。ICEはSession Traversal Utilities for NAT (STUN)プロトコルとその拡張であるTraversal Using Relay NAT (TURN)を使用する。

この文書は、RFC5245を廃止するものです。

本メモの位置づけ

これはInternet Standards Trackの文書である。

この文書は、インターネット技術タスクフォース（IETF）の成果物である。この文書は、IETFコミュニティのコンセンサスを代表するものである。この文書は公開レビューを受けており、インターネット技術運営グループ （IESG）により発行が承認されている。インターネット標準に関する詳しい情報は、RFC 7841のセクション2に記載されています。

この文書の現在の状態、正誤表、それに対するフィードバックの方法に関する情報は、https://www.rfc-editor.org/info/rfc8445 で入手できます。

著作権について

Copyright (c) 2018 IETF Trust and the persons identified as the document authors.無断転載を禁じます。

この文書は、この文書の発行日に有効なBCP 78およびIETFトラストのIETF文書に関す る法的規定(https://trustee.ietf.org/license-info)に従うものである。これらの文書は、この文書に関するあなたの権利と制限を記述しているので、 注意深く確認してください。この文書から抽出されたコードコンポーネントには、信託の法的規定のセクション4.eに記載されているように、簡易BSDライセンステキストを含める必要があり、簡易BSDライセンスに記載されているように、保証なしで提供されます。

この文書には、2008年11月10日以前に公開された、または公開されたIETF文書または IETF寄書からの資料が含まれている可能性がある。このような資料の著作権を管理する者は、IETF標準化プロセス外でそのような資料の 変更を許可する権利をIETFトラストに付与していないかもしれない。このような資料の著作権を管理する人物から適切なライセンスを得ずに、 この文書をIETF標準化プロセスの外部で修正することはできない。また、 RFCとして発行するためのフォーマットや英語以外の言語への翻訳を除いて、 この文書の派生物をIETF標準化プロセスの外部で作成することはできない。

目次

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   5
   2.  Overview of ICE . . . . . . . . . . . . . . . . . . . . . . .   6
     2.1.  Gathering Candidates  . . . . . . . . . . . . . . . . . .   8
     2.2.  Connectivity Checks . . . . . . . . . . . . . . . . . . .  10
     2.3.  Nominating Candidate Pairs and Concluding ICE . . . . . .  12
     2.4.  ICE Restart . . . . . . . . . . . . . . . . . . . . . . .  13
     2.5.  Lite Implementations  . . . . . . . . . . . . . . . . . .  13
   3.  ICE Usage . . . . . . . . . . . . . . . . . . . . . . . . . .  13
   4.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .  13
   5.  ICE Candidate Gathering and Exchange  . . . . . . . . . . . .  17
     5.1.  Full Implementation . . . . . . . . . . . . . . . . . . .  17
       5.1.1.  Gathering Candidates  . . . . . . . . . . . . . . . .  18
         5.1.1.1.  Host Candidates . . . . . . . . . . . . . . . . .  18
         5.1.1.2.  Server-Reflexive and Relayed Candidates . . . . .  20
         5.1.1.3.  Computing Foundations . . . . . . . . . . . . . .  21
         5.1.1.4.  Keeping Candidates Alive  . . . . . . . . . . . .  21
       5.1.2.  Prioritizing Candidates . . . . . . . . . . . . . . .  22
         5.1.2.1.  Recommended Formula . . . . . . . . . . . . . . .  22
         5.1.2.2.  Guidelines for Choosing Type and Local
                   Preferences . . . . . . . . . . . . . . . . . . .  23
       5.1.3.  Eliminating Redundant Candidates  . . . . . . . . . .  23
     5.2.  Lite Implementation Procedures  . . . . . . . . . . . . .  23
     5.3.  Exchanging Candidate Information  . . . . . . . . . . . .  24
     5.4.  ICE Mismatch  . . . . . . . . . . . . . . . . . . . . . .  26
   6.  ICE Candidate Processing  . . . . . . . . . . . . . . . . . .  26
     6.1.  Procedures for Full Implementation  . . . . . . . . . . .  26
       6.1.1.  Determining Role  . . . . . . . . . . . . . . . . . .  26
       6.1.2.  Forming the Checklists  . . . . . . . . . . . . . . .  28
         6.1.2.1.  Checklist State . . . . . . . . . . . . . . . . .  28
         6.1.2.2.  Forming Candidate Pairs . . . . . . . . . . . . .  28
         6.1.2.3.  Computing Pair Priority and Ordering Pairs  . . .  31
         6.1.2.4.  Pruning the Pairs . . . . . . . . . . . . . . . .  31
         6.1.2.5.  Removing Lower-Priority Pairs . . . . . . . . . .  31
         6.1.2.6.  Computing Candidate Pair States . . . . . . . . .  32
       6.1.3.  ICE State . . . . . . . . . . . . . . . . . . . . . .  36
       6.1.4.  Scheduling Checks . . . . . . . . . . . . . . . . . .  36
         6.1.4.1.  Triggered-Check Queue . . . . . . . . . . . . . .  36
         6.1.4.2.  Performing Connectivity Checks  . . . . . . . . .  36
     6.2.  Lite Implementation Procedures  . . . . . . . . . . . . .  38
   7.  Performing Connectivity Checks  . . . . . . . . . . . . . . .  38
     7.1.  STUN Extensions . . . . . . . . . . . . . . . . . . . . .  38
       7.1.1.  PRIORITY  . . . . . . . . . . . . . . . . . . . . . .  38
       7.1.2.  USE-CANDIDATE . . . . . . . . . . . . . . . . . . . .  38
       7.1.3.  ICE-CONTROLLED and ICE-CONTROLLING  . . . . . . . . .  39
     7.2.  STUN Client Procedures  . . . . . . . . . . . . . . . . .  39
       7.2.1.  Creating Permissions for Relayed Candidates . . . . .  39
       7.2.2.  Forming Credentials . . . . . . . . . . . . . . . . .  39
       7.2.3.  Diffserv Treatment  . . . . . . . . . . . . . . . . .  40
       7.2.4.  Sending the Request . . . . . . . . . . . . . . . . .  40
       7.2.5.  Processing the Response . . . . . . . . . . . . . . .  40
         7.2.5.1.  Role Conflict . . . . . . . . . . . . . . . . . .  40
         7.2.5.2.  Failure . . . . . . . . . . . . . . . . . . . . .  41
           7.2.5.2.1.  Non-Symmetric Transport Addresses . . . . . .  41
           7.2.5.2.2.  ICMP Error  . . . . . . . . . . . . . . . . .  41
           7.2.5.2.3.  Timeout . . . . . . . . . . . . . . . . . . .  41
           7.2.5.2.4.  Unrecoverable STUN Response . . . . . . . . .  41
         7.2.5.3.  Success . . . . . . . . . . . . . . . . . . . . .  42
           7.2.5.3.1.  Discovering Peer-Reflexive Candidates . . . .  42
           7.2.5.3.2.  Constructing a Valid Pair . . . . . . . . . .  43
           7.2.5.3.3.  Updating Candidate Pair States  . . . . . . .  44
           7.2.5.3.4.  Updating the Nominated Flag . . . . . . . . .  44
         7.2.5.4.  Checklist State Updates . . . . . . . . . . . . .  44
     7.3.  STUN Server Procedures  . . . . . . . . . . . . . . . . .  45
       7.3.1.  Additional Procedures for Full Implementations  . . .  45
         7.3.1.1.  Detecting and Repairing Role Conflicts  . . . . .  46
         7.3.1.2.  Computing Mapped Addresses  . . . . . . . . . . .  47
         7.3.1.3.  Learning Peer-Reflexive Candidates  . . . . . . .  47
         7.3.1.4.  Triggered Checks  . . . . . . . . . . . . . . . .  47
         7.3.1.5.  Updating the Nominated Flag . . . . . . . . . . .  49
       7.3.2.  Additional Procedures for Lite Implementations  . . .  49
   8.  Concluding ICE Processing . . . . . . . . . . . . . . . . . .  50
     8.1.  Procedures for Full Implementations . . . . . . . . . . .  50
       8.1.1.  Nominating Pairs  . . . . . . . . . . . . . . . . . .  50
       8.1.2.  Updating Checklist and ICE States . . . . . . . . . .  51
     8.2.  Procedures for Lite Implementations . . . . . . . . . . .  52
     8.3.  Freeing Candidates  . . . . . . . . . . . . . . . . . . .  53
       8.3.1.  Full Implementation Procedures  . . . . . . . . . . .  53
       8.3.2.  Lite Implementation Procedures  . . . . . . . . . . .  53
   9.  ICE Restarts  . . . . . . . . . . . . . . . . . . . . . . . .  53
   10. ICE Option  . . . . . . . . . . . . . . . . . . . . . . . . .  54
   11. Keepalives  . . . . . . . . . . . . . . . . . . . . . . . . .  54
   12. Data Handling . . . . . . . . . . . . . . . . . . . . . . . .  55
     12.1.  Sending Data . . . . . . . . . . . . . . . . . . . . . .  55
       12.1.1.  Procedures for Lite Implementations  . . . . . . . .  56
     12.2.  Receiving Data . . . . . . . . . . . . . . . . . . . . .  56
   13. Extensibility Considerations  . . . . . . . . . . . . . . . .  57
   14. Setting Ta and RTO  . . . . . . . . . . . . . . . . . . . . .  57
     14.1.  General  . . . . . . . . . . . . . . . . . . . . . . . .  57
     14.2.  Ta . . . . . . . . . . . . . . . . . . . . . . . . . . .  58
     14.3.  RTO  . . . . . . . . . . . . . . . . . . . . . . . . . .  58
   15. Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  59
     15.1.  Example with IPv4 Addresses  . . . . . . . . . . . . . .  60
     15.2.  Example with IPv6 Addresses  . . . . . . . . . . . . . .  65
   16. STUN Extensions . . . . . . . . . . . . . . . . . . . . . . .  69
     16.1.  Attributes . . . . . . . . . . . . . . . . . . . . . . .  69
     16.2.  New Error-Response Codes . . . . . . . . . . . . . . . .  70
   17. Operational Considerations  . . . . . . . . . . . . . . . . .  70
     17.1.  NAT and Firewall Types . . . . . . . . . . . . . . . . .  70
     17.2.  Bandwidth Requirements . . . . . . . . . . . . . . . . .  70
       17.2.1.  STUN and TURN Server-Capacity Planning . . . . . . .  71
       17.2.2.  Gathering and Connectivity Checks  . . . . . . . . .  71
       17.2.3.  Keepalives . . . . . . . . . . . . . . . . . . . . .  72
     17.3.  ICE and ICE-Lite . . . . . . . . . . . . . . . . . . . .  72
     17.4.  Troubleshooting and Performance Management . . . . . . .  72
     17.5.  Endpoint Configuration . . . . . . . . . . . . . . . . .  73
   18. IAB Considerations  . . . . . . . . . . . . . . . . . . . . .  73
     18.1.  Problem Definition . . . . . . . . . . . . . . . . . . .  73
     18.2.  Exit Strategy  . . . . . . . . . . . . . . . . . . . . .  74
     18.3.  Brittleness Introduced by ICE  . . . . . . . . . . . . .  74
     18.4.  Requirements for a Long-Term Solution  . . . . . . . . .  75
     18.5.  Issues with Existing NAPT Boxes  . . . . . . . . . . . .  75
   19. Security Considerations . . . . . . . . . . . . . . . . . . .  76
     19.1.  IP Address Privacy . . . . . . . . . . . . . . . . . . .  76
     19.2.  Attacks on Connectivity Checks . . . . . . . . . . . . .  77
     19.3.  Attacks on Server-Reflexive Address Gathering  . . . . .  80
     19.4.  Attacks on Relayed Candidate Gathering . . . . . . . . .  80
     19.5.  Insider Attacks  . . . . . . . . . . . . . . . . . . . .  81
       19.5.1.  STUN Amplification Attack  . . . . . . . . . . . . .  81
   20. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  82
     20.1.  STUN Attributes  . . . . . . . . . . . . . . . . . . . .  82
     20.2.  STUN Error Responses . . . . . . . . . . . . . . . . . .  82
     20.3.  ICE Options  . . . . . . . . . . . . . . . . . . . . . .  82
   21. Changes from RFC 5245 . . . . . . . . . . . . . . . . . . . .  83
   22. References  . . . . . . . . . . . . . . . . . . . . . . . . .  84
     22.1.  Normative References . . . . . . . . . . . . . . . . . .  84
     22.2.  Informative References . . . . . . . . . . . . . . . . .  85
   Appendix A.  Lite and Full Implementations  . . . . . . . . . . .  89
   Appendix B.  Design Motivations . . . . . . . . . . . . . . . . .  90
     B.1.  Pacing of STUN Transactions . . . . . . . . . . . . . . .  90
     B.2.  Candidates with Multiple Bases  . . . . . . . . . . . . .  92
     B.3.  Purpose of the Related-Address and Related-Port
           Attributes  . . . . . . . . . . . . . . . . . . . . . . .  94
     B.4.  Importance of the STUN Username . . . . . . . . . . . . .  95
     B.5.  The Candidate Pair Priority Formula . . . . . . . . . . .  96
     B.6.  Why Are Keepalives Needed?  . . . . . . . . . . . . . . .  96
     B.7.  Why Prefer Peer-Reflexive Candidates? . . . . . . . . . .  97
     B.8.  Why Are Binding Indications Used for Keepalives?  . . . .  97
     B.9.  Selecting Candidate Type Preference . . . . . . . . . . .  97
   Appendix C.  Connectivity-Check Bandwidth . . . . . . . . . . . .  99
   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . . 100
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . . 100


1.はじめに
ピア間の通信セッションを確立するプロトコルは、通常、データソースとシンクのIPアドレスとポートを交換します。しかし、これはネットワークアドレス変換器（NAT）[RFC3235]を介して運用される場合、課題を提起する。また、これらのプロトコルは、参加者間にアプリケーション層の仲介がないように、参加者間で直接データフローを作成することを目的としています。これは、データの遅延を減らし、パケットロスを減らし、アプリケーションを展開するための運用コストを削減するために行われます。しかし、これはNATを通して実現するのは難しい。この理由の完全な取り扱いは、この仕様の範囲外である。

これらのプロトコルがNATを通して動作できるようにするための数多くのソリューションが定義されています。これには、アプリケーションレイヤーゲートウェイ(ALG)、ミドルボックス制御プロトコル[RFC3303]、オリジナルのSimple Traversal of UDP Through NAT (STUN) 仕様 [RFC3489] (RFC 3489はRFC 5389に取って代わられました)、レルム固有IP [RFC3102] [RFC3103] と、これらの動作を可能にするセッション記述拡張、例えばリアルタイム制御プロトコル (RTCP)[RFC3605] に対する セッション記述プロトコル (SDP) 属性 [RFC 4566] などの技術が含まれます。残念ながら、これらの技術はすべて長所と短所があり、あるネットワークトポロジでは最適だが、他のトポロジでは不適切な選択となる。その結果、管理者と実装者は、そのソリューションが展開されるネットワークのトポロジーを仮定することになります。これは、システムに複雑さと脆さをもたらします。

本仕様では、UDPベースのデータストリームのNATトラバーサルのための技術として、 Interactive Connectivity Establishment (ICE) を定義する(ただし、ICEはTCPなど他のトランスポートプロトコルを扱うために 拡張されている[RFC6544])。ICEは、複数のIPアドレスとポートを交換し、ピアツーピアの接続性チェックによって接続性をテストすることで機能します。IPアドレスとポートは、ICEの用途に特化したメカニズム（Offer/Answer交換など）を使用して交換され、接続性チェックはSTUN [RFC5389]を使用して実行されます。ICEはまた、STUNの拡張であるTraversal Using Relay around NAT（TURN）[RFC5766]を使用します。ICEは、メディアストリームごとに複数のIPアドレスとポートを交換するため、マルチホー ムドやデュアルスタックのホストに対するアドレス選択も可能です。このため、RFC 5245 [RFC5245]は、RFC 4091 [RFC4091]とRFC 4092 [RFC4092]で以前定義された解決策を非推奨にしました。

付録Bは、ICEを設計する際に決定した設計の背景や動機について記載しています。

2.ICEの概要
ICEの典型的な展開では、通信を希望する2つのエンドポイント（ICEエージェント）があります。ICEは、信号プロトコルのNAT越えを意図していないことに注意してください。これは、別のメカニズムで提供されることを前提としています。ICEは、エージェントが相互に信号接続を確立できることを前提としています。

当初、エージェントは自分たちのトポロジーを知らない。特に、エージェントはNAT(または複数層のNAT)の後ろにいるかもしれないし、そうでないかもしれない。ICEは、エージェントがデータセッションを確立するための1つまたは複数のパスを潜在的に見つけるために、そのトポロジーに関する十分な情報を発見することを可能にします。

図1は、典型的なICEの配置を示したものである。エージェントはLとRと名づけられた。LとRの両方がそれぞれのNATの後ろにいるが、それに気づいていないかもしれない。NATの種類とその特性も不明である。LとRは、LとRの間のデータセッションをセットアップすることを目的とした、候補交換プロセスに関与することができる。通常、この交換は、シグナリングサーバー（たとえば、SIPプロキシ）を介して行われる。

エージェント、シグナリングサーバ、NATに加えて、ICEは通常、ネットワーク内のSTUNまたはTURNサーバと協調して使用されます。各エージェントは独自のSTUNまたはTURNサーバを持つことも、同じサーバを持つことも可能です。

                               +---------+
             +--------+        |Signaling|         +--------+
             | STUN   |        |Server   |         | STUN   |
             | Server |        +---------+         | Server |
             +--------+       /           \        +--------+
                             /             \
                            /               \
                           / <- Signaling -> \
                          /                   \
                   +--------+               +--------+
                   |  NAT   |               |  NAT   |
                   +--------+               +--------+
                      /                             \
                     /                               \
                 +-------+                       +-------+
                 | Agent |                       | Agent |
                 |   L   |                       |   R   |
                 +-------+                       +-------+

                     Figure 1: ICE Deployment Scenario

ICEの基本的な考え方は次のとおりである。各エージェントは、他のエージェントと通信するために使用できるさまざまなトランスポートアドレスの候補（特定のトランスポートプロトコルのIPアドレスとポートの組み合わせ、この仕様では常にUDPである）を持っている。これらは以下の通りである。

o 直接接続されたネットワークインターフェースのトランスポートアドレス。

o NATのパブリック側の変換されたトランスポートアドレス（「サーバ・リフレクシブ」アドレス）

o TURNサーバから割り当てられたトランスポートアドレス（「中継アドレス」）。

潜在的には、Lの候補トランスポートアドレスのいずれかを使用して、Rの候補トランスポートアドレスのいずれかと通信することができる。しかし、実際には多くの組み合わせがうまくいかない。例えば、LとRがともにNATの背後にある場合、直接接続されたインターフェースアドレスが直接通信できる可能性は低い（結局のところ、これがICEが必要とされる理由である！）。ICEの目的は、どのアドレスのペアがうまくいくかを発見することです。ICEがこれを行う方法は、1つまたはそれ以上の動作が見つかるまで、すべての可能なペアを（注意深く並べ替えて）系統的に試すことです。

2.1.候補者の収集
ICEを実行するために、ICEエージェントは1つまたは複数のアドレス候補を識別し、収集します。候補は、特定のトランスポートプロトコル(ここではUDPのみ指定)のIPアドレスと ポートの組み合わせであるトランスポートアドレスを持っています。候補には、物理的または論理的なネットワークインターフェイスから得られるものと、STUNやTURNを介して発見できるものとがあります。

第一のカテゴリーは、ローカルインターフェースから直接取得したトランスポートアドレスを持つ候補である。このような候補は「ホスト候補」と呼ばれる。ローカルインターフェイスはイーサネットやWi-Fiであったり、仮想プライベートネットワーク（VPN）やモバイルIP（MIP）のようなトンネル機構を介して取得されるものであったりする。どのような場合でも、このようなネットワーク・インターフェースは、ポート（したがって候補）を割り当てることができるローカル・インターフェースとしてエージェントに表示されます。

次に、エージェントはSTUNまたはTURNを使用して、追加の候補を取得します。これらは、NATのパブリックサイドで変換されたアドレス(サーバー反射型候補)と、TURNサーバーのアドレス(中継型候補)の2種類がある。TURNサーバーを利用する場合は、両方のタイプの候補がTURNサーバーから取得される。STUNサーバーのみを利用する場合は、STUNサーバーからサーバー反射型候補のみを取得する。これらの候補とホスト候補の関係を図2に示す。この図では、両方の候補がTURNを用いて発見されている。図中、X:xという表記は、IPアドレスX、UDPポートxを意味する。


                      To Internet

                          |
                          |
                          |  /------------  Relayed
                      Y:y | /               Address
                      +--------+
                      |        |
                      |  TURN  |
                      | Server |
                      |        |
                      +--------+
                          |
                          |
                          | /------------  Server
                   X1':x1'|/               Reflexive
                    +------------+         Address
                    |    NAT     |
                    +------------+
                          |
                          | /------------  Local
                      X:x |/               Address
                      +--------+
                      |        |
                      | Agent  |
                      |        |
                      +--------+


                     Figure 2: Candidate Relationships

エージェントがIPアドレスとポートX:xからTURN Allocateリクエストを送信すると、NAT(あると仮定)はこのサーバー反射候補をホスト候補X:xにマッピングして、バインドX1':x1'を作成する。ホスト候補から送られる送信パケットは、NATによってサーバー反射候補に変換される。サーバー反射候補に送られた着信パケットは、NATによってホスト候補に変換され、エージェントに転送されます。与えられたサーバー反射候補に関連付けられたホスト候補は「ベース」である。

注："ベース "とは、エージェントが特定の候補から送信するアドレスのことです。したがって、縮退したケースとして、ホスト候補もベースを持ちますが、それはホスト候補と同じです。

エージェントとTURNサーバーの間に複数のNATがある場合、TURNリクエストは各NAT上にバインドを作成するが、一番外側のサーバー反射候補(TURNサーバーに最も近いもの)のみがエージェントに発見される。もしエージェントがNATの後ろにいなければ、ベース候補はサーバー反射候補と同じになり、サーバー反射候補は冗長で、排除されることになる。

AllocateリクエストはTURNサーバーに到着する。TURNサーバーはそのローカルIPアドレスYからポートyを割り当て、Allocate応答を生成して、この中継候補をエージェントに通知する。TURNサーバーはまた、AllocateリクエストのソーストランスポートアドレスをAllocateレスポンスにコピーすることによって、サーバー反射の候補X1':x1'をエージェントに通知する。Lにトラフィックを送るために、RはY:yのTURNサーバーにトラフィックを送り、TURNサーバーはそれをX1':x1'に転送し、NATを通過してX:xにマップされてLに配送される。

STUNサーバーのみが利用される場合、エージェントはSTUNバインディングリクエスト [RFC5389]をそのSTUNサーバーに送信する。STUNサーバーはバインディングリクエストのソーストランスポートアドレスをバインディングレスポンスにコピーすることで、サーバーリフレクティブ候補X1':x1'をエージェントに通知します。

2.2.接続性チェック
Lはすべての候補を集めたら、優先度の高いものから低いものへと順番に並べ、シグナリングチャネルでRに送信する。RはLから候補を受信すると、同じ収集プロセスを実行し、候補のリストで応答する。このプロセスの最後に、各ICEエージェントは自分の候補と相手の候補の両方の完全なリストを持つ。そして、それらをペアリングし、候補ペアを作成する。どのペアがうまくいくかを確認するために、各エージェントは一連の接続性チェックをスケジュールします。各チェックは、ローカル候補からリモート候補にSTUNリクエストを送信することで、クライアントが特定の候補ペアで実行するSTUNリクエスト/レスポンストランザクションです。

接続性チェックの基本原理はシンプルです。

1.候補ペアを優先順に並べる。

2.各候補ペアのチェックを優先的に送信する。

3.相手エージェントから受け取った小切手を確認する。

両エージェントが候補ペアのチェックを行うことで、結果として4ウェイハンドシェイクが実現します。


                  L                        R
                  -                        -
                  STUN request ->             \  L's
                            <- STUN response  /  check

                             <- STUN request  \  R's
                  STUN response ->            /  check

                    Figure 3: Basic Connectivity Check

STUNリクエストは、データ(例：RTP、RTCP、または他のプロトコル)に使用されるのと まったく同じIPアドレスとポートから送受信されるということに注意することが重要であ る。その結果、エージェントは受信したポートではなく、パケットの内容を使用してSTUNとデータをデマルチプレクスする。

STUNバインディングリクエストは接続性チェックに使用されるため、STUNバインディング 応答には、エージェントとピア間のNATのパブリックサイドにあるエージェントの翻訳され たトランスポートアドレスが含まれることになる。このトランスポートアドレスが、エージェントがすでに学習した他の候補と異なる場合、それは新しい候補（peer-reflexive candidate）を表し、他の候補と同じようにICEによってテストされます。

上記のアルゴリズムでは、すべてのペアの候補を検索するため、動作するペアが存在すれば、候補がどのような順番で試されても、最終的にはそれを見つけることができます。そこで、より速く（より良い結果を）得るために、候補を特定の順序で並べ替えます。ソートされたペアの候補のリストを「チェックリスト」と呼びます。

エージェントは、定期的にリスト上の次の候補ペアに対するSTUN要求を送信することによって、チェックリストを介して動作します。これは「通常チェック」と呼ばれる。STUNトランザクションが成功すると、1つ以上の候補ペアがいわゆる「有効ペア」となり、「有効リスト」と呼ばれる候補ペアリストに追加される。

最適化として、RはLのチェック・メッセージを受け取るとすぐに、同じ候補ペアに関する接続性チェック・メッセージをLに送信するようスケジュールする。これは「トリガーチェック」と呼ばれ、有効なペアを見つけるプロセスを加速させる。

このハンドシェイクが終了した時点で、LとRの両者は、双方向でメッセージを端から端まで送る（受け取る）ことができることを知ることになる。

一般に、優先度アルゴリズムは、類似のタイプの候補が類似の優先度を得るように設計されており、より直接的な経路(つまり、データリレーやNATのない経路)が間接的な経路(データリレーやNATのある経路)より優先されるようになっています。しかし、これらのガイドラインの範囲内で、エージェントはアルゴリズムをどのように調整するかについて、かなりの裁量権を持っています。

データストリームは、複数のコンポーネント(RTPとRTCPなど、独自の候補セット を必要とするデータストリームの断片)で構成される場合がある。

2.3.候補ペアの指名と ICE の締結
ICEは、ICEエージェントの1つを制御エージェントの役割に、もう1つを被制御エージェントの役割に割り当てる。データストリームの各コンポーネントについて、制御エージェントはデータに使用する有効なペア（有効リストより）を指名する。指名の正確なタイミングは、ローカルポリシーに基づく。

指名するとき、制御エージェントは、データストリームの各コンポーネントについて、少なくとも1つの有効なペアが見つかるまでチェックを続けさせ、次に有効なペアを選び、そのペアでSTUNリクエストを送信し、制御されるピアにそれが指名されたことを示す属性を使用します。これを図4に示す。

             L                        R
             -                        -
             STUN request ->             \  L's
                       <- STUN response  /  check

                        <- STUN request  \  R's
             STUN response ->            /  check

             STUN request + attribute -> \  L's
                       <- STUN response  /  check

                           Figure 4: Nomination
図4：ノミネーション

制御されるエージェントが属性を持つSTUN要求を受け取ると、（チェックがすでに行われていない限り）同じペアをチェックする。上記のトランザクションが成功した場合、エージェントはペアの指名フラグを設定し、データストリームのそのコンポーネントに対する将来のチェックをキャンセルする。エージェントがデータストリームの各コンポーネントに対して指名フラグを設定すると、そのペアは選択されたペアになる。その後、選択されたペアのみが、そのデータストリームに関連するデータの送受信のために使用される。

2.4.ICEリスタート
ICEが終了したら、ICEエージェントのいずれかによって、1つまたはすべてのデータストリームに対していつでも再開することができます。これは、再開を示す更新された候補情報を送信することで行われる。

2.5.Liteの実装
ある種のICEエージェントは、常に公衆インターネットに接続され、任意の通信相手からのパケットを受信できる公衆IPアドレスを持っています。これらのデバイスがICEを簡単にサポートできるように、ICEは "lite "と呼ばれる特別なタイプの実装を定義しています（通常のフル実装とは対照的です）。ライトエージェントはホスト候補のみを使用し、接続性チェックの生成やステートマシンの実行は行いませんが、接続性チェックに応答することができる必要があります。

3.ICE の使用状況
本書は、ICEエージェント間で候補者情報を交換する手段を提供するプロトコルでの ICEの一般的な使用について規定する。ICEを使用するプロトコル（以下、使用プロトコル）ごとの具体的な詳細（候補者情報 の符号化方法や実際の候補者交換処理）については、別の使用文書で説明する。

エージェントが候補情報を交換することを可能にする1つのメカニズムは、SIPプロトコル [RFC3261] [ICE-SIP-SDP]の一部であるOffer/Answerセマンティクス（[RFC3264]に基づく）を利用することです。

[RFC7825]は、Real-Time Streaming Protocol（RTSP）のICE用法を定義している。しかし、ICEの使用法はRFC5245に基づいていることに注意。

4.用語
本文書におけるキーワード「MUST」「MUST NOT」「REQUIRED」「SHALL」「SHALL NOT」「SHOULD」「SHOULD NOT」「RECOMMENDED」「NOT RECOMMENDED」「MAY」「OPTIONAL」は、ここに示すようにすべて大文字で現れるときのみBCP 14 [RFC2119] [RFC8174] に記載されているように解釈するものとします。

読者は[RFC5389]で定義された用語とUDPのNAT Behavioral要件[RFC4787]を熟知している必要があります。

本仕様では、以下の追加用語を使用する。

ICEセッション。ICEセッションは、候補の収集から始まり、候補がすべて解放されるかICE再起動が行われるまでのICEエージェント間のやりとり（候補交換、接続性チェック、ノミネーション、キープアライブ）までのすべてのICE関連アクションから構成されます。

ICEエージェント、エージェント。ICEエージェント（単に「エージェント」と呼ばれることもある）は、ICE候補者交換に関与するプロトコルの実装である。典型的な候補者交換には、2つのエージェントが関与している。

Initiating Peer、Initiating Agent、Initiator。開始エージェントとは、ICE候補の交換プロセスを開始するICEエージェントのことである。

レスポンディングピア、レスポンディングエージェント、レスポンダ。応答側エージェントとは、開始側エージェントが開始した候補者交換プロセスを受 け取り、それに応答するICEエージェントである。

ICE候補者交換、Candidate Exchange。ICEエージェントが、ICEを実行するために必要な情報（候補やパスワードなど）を交換するプロセス。SDPエンコーディングによるOffer/Answer[RFC3264]は、候補者情報の交換に使用できるプロトコルの一例である。

ピア。セッションのICEエージェントの1つから見ると、そのピアは他のエージェントで ある。具体的には、開始側エージェントの観点からは、ピアは応答側エージェント である。応答側エージェントの観点からは、ピアは開始側エージェントである。

トランスポートアドレス。IPアドレスとトランスポートプロトコル（UDPやTCPなど）のポートの組合せ。

データ、データストリーム、データセッション。ICEを使用してデータセッションを設定する場合、データは何らかのプロトコルを使用して転送されます。メディアは通常、RTPで転送され、RTPパケットのストリームで構成される。データセッションとは、ICEで作成されテストされたパス上でピア間で交換されるデータパケットを指します。

Candidate, Candidate Information:データ受信のための潜在的な接点となるトランスポートアドレス。候補はまた、そのタイプ（サーバ反射型、中継型、ホスト型）、優先度、基盤、および基本という特性を持つ。

コンポーネント。コンポーネントとは、データストリームの一部分である。データストリームは複数のコンポーネントを必要とする場合があり、データスト リーム全体が動作するためには、各コンポーネントが動作しなければならない。RTP/RTCPデータストリームの場合、RTPとRTCPが同じポートで多重化されて いない限り、データストリームごとに2つのコンポーネントが存在する。コンポーネントには候補ペアがあり、他のコンポーネントが使用することはできな い。

ホスト候補：ホスト上のIPアドレスから、特定のポートにバインドして得られる候補。物理的なインターフェイス上のIPアドレスや、VPNで取得したような論理的なIPアドレスも含まれる。

Server-Reflexive Candidate：ICEエージェントがNATを経由してSTUNサーバーなどのサーバーにパケットを送信した後、NATによって割り当てられたIPアドレスとポートのバインディングを持つ候補者。

ピアリフレクティブ候補：ICEエージェントがNATを経由してピアにパケットを送信した後、NATによって割り当てられたIPアドレスとポートのバインディングである候補。

中継候補：TURNサーバなどの中継サーバから取得した候補。

ベース。ベース: ICEエージェントが特定の候補から送信するトランスポートアドレス。ホスト候補、サーバー反射型候補、ピア反射型候補の場合、ベースはホスト候補と同じである。中継される候補の場合、ベースは中継される候補(すなわち、TURNサーバーが送信元として使用するトランスポートアドレス)と同じである。

Related Address and Port（関連アドレスとポート）。候補に関連するトランスポートアドレスで、診断などに有用である。候補がサーバまたはピアリフレクティブの場合、関連するアドレスとポートはそのサーバまたはピアリフレクティブ候補のベースと同じになる。候補が中継される場合、関連するアドレスとポートは、クライアントにその中継される候補を提供したAllocate応答内のマッピングされたアドレスと等しくなります。候補がホスト候補の場合、関連するアドレスとポートはホスト候補と同じになります。

ファンデーション。凍結アルゴリズムにおいて、類似の候補をグループ化するために使用される任意の文字列。タイプ、ベースIPアドレス、プロトコル（UDP、TCPなど）、STUNまたはTURNサーバーが同じ2つの候補で同じになる。これらのいずれかが異なる場合、基盤は異なるものとなる。

ローカル候補：ICEエージェントが取得し、ピアに送信する可能性のある候補。

リモート候補：ICEエージェントがピアから受信した候補。

デフォルトデスティネーション/候補：データストリームのコンポーネントのデス ティネーションのデフォルトは、ICEを認識していないICEエージェントが使用す るトランスポートアドレスである。コンポーネントのデフォルト候補とは、トランスポートアドレスがそのコン ポーネントのデフォルトデスティネーションに一致するものである。

候補者ペア(Candidate Pair)。ローカル候補とリモート候補を含むペア。

チェック、コネクティビティチェック、STUNチェック。接続性を確認するためのSTUNバインディング要求。チェックは、候補ペアのローカル候補の基地からリモート候補に送信される。

チェックリスト。ICEエージェントがチェックを生成するために使用する、候補となるペアの順序付きセット。

通常のチェック。ICEエージェントが定期的に起動するタイマーの結果として生成される接続性チェックで、チェックを送信するように指示する。

トリガーチェック。相手から接続性チェックを受信した結果として生成される接続性チェック。

有効なペア。有効なペア：ローカル候補が接続性チェックに成功した応答のマッピングされたアドレスに等しく、リモート候補が接続性チェック要求の送信先アドレスに等しい候補ペア。

Valid List（有効リスト）。STUNトランザクションが成功したときに検証された、データストリームの候補ペアの順序付きセット。

チェックリスト・セット。すべてのチェックリストの順序付きリスト。順番は各ICEの使用方法によって決まります。

完全な実装。完全な実装：本仕様で定義された機能一式を実行するICE実装。

Lite実装。特定の機能を省略したICE実装で、Lite実装でないピアがICEの利点を得るために必要なものだけを実装しています。Lite実装は、ステートマシンを一切保持せず、接続性チェックも生成しない。

コントロール・エージェント(Controlling Agent)。候補ペアを推薦するICEエージェント。どのセッションでも、常に1つの制御側エージェントと1つの被制御側エージェントが存在する。

Controlled Agent（コントロール・エージェント）。ICEエージェントは、制御エージェントが候補ペアを推薦するのを待つ。

指名。ICEエージェントがデータの送受信に使用する候補ペアを、制御エージェントが被制御エージェ ントに指示する処理。本仕様で定義されるノミネーションプロセスは、RFC5245では「レギュラーノミネーション」と呼ばれていた。RFC5245で「アグレッシブノミネーション」と呼ばれていたノミネーションプロセスは、本仕様で非推奨となった。

指名される、指名フラグ。候補ペアの指名が成功すると、その候補ペアは指名されたことになり、その指名フラグの値が真に設定される。

Selected Pair、選択された候補ペア。データストリームのコンポーネントのデータ送受信に使用されるペアの候補を「選択されたペア」と呼ぶ。データストリームのために選択されたペアが生成される前は、データストリームのコンポーネントに関連する任意の有効なペアを、そのコンポーネントのデータ送信および受信に使用することができる。データストリームの各コンポーネントに対して推薦されたペアが存在すると、その推薦されたペアは、データストリームの選択されたペアになる。選択されたペアに関連付けられた候補は、「選択された候補」と呼ばれる。

プロトコル、ICEの使用方法。NAT トラバーサルに ICE を使用するプロトコル。ここで定義された手順をそのプロトコルにどのように適用するか、プロトコル固有の詳細を定義するのが使用法指定である。

タイマTa。STUNまたはTURNトランザクションを新規に生成するためのタイマです。

タイマーRTO（Retransmission Timeout）。STUNまたはTURNトランザクションの再送タイマーを指定します。

5.ICE候補者の集い・交流会
ICE処理の一部として、開始エージェントと応答エージェントは、候補を集め、優先順位をつけ、冗長な候補を排除し、使用プロトコルによって定義された相手と候補情報を交換する（ICEの使用法）。候補のエンコード機構や候補情報交換のセマンティックスの詳細については、本仕様の範囲外である。

5.1.フル実装
5.1.1.候補者の収集
ICEエージェントは、通信が差し迫っていると判断すると、候補を収集する。開始エージェントは、ユーザーインターフェイスの合図またはセッションを開始 するための明示的な要求に基づいてこれを行うことができる。すべての候補はトランスポートアドレスを持っている。また、タイプおよびベースも持つ。この仕様では、ホスト候補、サーバー反射型候補、ピア反射型候補、および中継型候補 の4つのタイプが定義され、収集されている。サーバ反射型候補はSTUNまたはTURNで収集され、中継型候補はTURNで取得される。ピアリフレックス候補は、ICEの後のフェーズで、接続性チェックの結果として得られる。

応答側エージェントで候補を収集するプロセスは、開始側エージェントのプロセスと同じ である。応答エージェントは、ICEセッションに関連するアプリケーションのユーザーに警告を発 する前に、候補者情報を受信したら直ちにこの処理を開始することが推奨される（RECOMMENDED）。

5.1.1.1.ホスト候補
ホスト候補は、ホスト上のインターフェイス（物理または仮想、VPNインターフェイスを含む）に接続されたIPアドレス上のポートにバインドして取得します。

ICEエージェントが使用したい各データストリームの各コンポーネントについて、エ ージェントは、以下に示す例外を除き、ホストが持つ各IPアドレス上で候補を取得すべ きである[SHOULD]。エージェントは、特定のIPアドレスのUDPポートにバインドすることで、各 候補を取得する。ホストの候補(そして実際にすべての候補)は、常に候補である特定のコンポー ネントと関連付けられている。

各コンポーネントには、「コンポーネントID」と呼ばれるIDが割り当てられている。RTP/RTCPデータストリームの場合、RTPとRTCPの両方が同じUDPポートに多重化されていない限り（RTP/RTCP多重化）、RTP自身はコンポーネントIDが1、RTCPはコンポーネントIDが2である。

候補を取得する場合、エージェントがRTP/RTCP多重化を使用することを確実に 知っている場合(つまり、他のエージェントもRTP/RTCP多重化をサポートしており、 使用する意思があることを知っている場合)、またはエージェントがRTP/RTCP多重化 しかサポートしていない場合を除いて、エージェントはRTCPの別の候補を取得し なければならない[MUST]。エージェントがRTCPの候補を取得し、RTP/RTCP多重化を使用することになった場合、 エージェントはRTCP候補の接続性チェックを実行する必要はない。このようにコンポーネントID 2が存在しないことは、RTCP/RTP多重化の使用を意味するものではありません。

エージェントがRTPとRTCPに別々の候補を使用する場合、エージェントにK個のIPアドレスがあれば、最終的に2*K個のホスト候補を持つことになります。

応答側エージェントは、候補を取得するときに、相手側エージェントがRTP/RTCP多 重化をサポートしているかどうかを通常知ることになる、ということに注意。ただし、このようなコンポーネントID 2がない場合、RTCP/RTP多重化を使用していないことを意味するわけではない。

RTP/RTCPストリーム以外の複数のコンポーネントの使用は、ICE処理の複雑さを増 すため、推奨されない。複数のコンポーネントが必要な場合、コンポーネントIDは1から始まり、各コンポー ネントごとに1ずつ増加すべきである[SHOULD]。

各ホスト候補のベースは、候補自身に設定されます。

ホスト候補は、以下の例外を除き、すべてのIPアドレスから収集されます。

o ループバックインターフェイスからのアドレスは、候補アドレスに含めては ならない[MUST NOT]。

o 非推奨のIPv4互換IPv6アドレス(RFC4291)とIPv6サイトローカルユニキャストアドレス (RFC3879)は、アドレス候補に含めてはならない[MUST NOT]。

o ICEを使用するアプリケーションがIPv4をサポートしない(すなわち、IPv6オン リーアプリケーション[RFC4038])限り、IPv4マップされたIPv6アドレスはア ドレス候補に含めないべきである[SHOULD NOT]。

o 位置追跡を防ぐ仕組み[RFC7721]を使用して生成されたIPv6アドレスに 対応する一つ以上のホスト候補を集める場合、位置追跡を許可するIPv6アド レス、同じインターフェースに設定されている、同じネットワークプレ フィックスの一部に対応するホスト候補を集めてはならない[MUST NOT]。同様に、位置追跡を防ぐ仕組みを用いて生成されたIPv6アドレスに対応するホスト候補を集めた場合、IPv6リンクローカルアドレス[RFC4291]に対応するホスト候補を集めてはならない[MUST NOT]。

IPv6デフォルトアドレス選択仕様[RFC6724]では、パーマネントアドレスよりもテンポラリーアドレス[RFC4941]を優先することが規定されています。

5.1.1.2. サーバー反射型とリレー型候補
ICEエージェントは、サーバー反射型と中継型の候補を収集すべきである[SHOULD]。しかし、STUNとTURNサーバーの使用はネットワークによっては 不要かもしれないし、TURNサーバーの使用は高価なので、一部の配備では 使用しないことを選択できるかもしれない。エージェントがサーバー反射型またはリレー型候補を収集しない場合、その機能を実装し、設定によって無効にするだけで、将来状況が変わったときに設定によって再び有効にできるようにすることが推奨される(RECOMMENDED)。

エージェントは、各ホスト候補を、設定されているか、何らかの手段で発見した STUNサーバーまたはTURNサーバーと対にする。ドメイン名を設定し、STUNサーバーを発見するために[RFC5389]のDNS手順(「stun」サービスと共にSRVレコードを使用)を使用し、TURNサーバーを発見するために[RFC5766]のDNS手順(「turn」サービスと共にSRVレコードを使用)を使用することが推奨される(RECOMMENDED)。

複数のSTUNサーバーまたはTURNサーバーが利用可能な場合(またはDNSレコードで 学習し、複数の結果が返された場合)、エージェントはそれらすべての候補を集めて もよく(MAY)、少なくとも1つの候補(1つのSTUNサーバーと1つのTURNサーバー)を集 めるべきである(SHOULD)。それはホスト候補とSTUNサーバーまたはTURNサーバーをペアにして行い、各ペアについて、エージェントはホスト候補からサーバーにバインドまたは割り当てリクエストを送信する。STUNサーバーへのバインドリクエストは認証されず、応答中のいかなるALTERNATE-SERVER属性も無視される。エージェントは[RFC5389]で定義されているBindingリクエストの下位互換 モードをサポートしなければならない[MUST]。Allocateリクエストは、クライアントが他の何らかの手段で得た長期的な信用証明 書を使用して認証されるべきである[SHOULD]。

収集プロセスはタイマーTaを使用して制御される。Taが切れるたびに、エージェントは別の新しいSTUNまたはTURNトランザクショ ンを生成することができる。このトランザクションは、回復可能なエラー(認証失敗など)で失敗した前のトランザク ションの再試行か、新しいホスト候補とSTUNまたはTURNサーバーのペアのためのトラン ザクションのどちらかであり得る。エージェントは、各TAの有効期限ごとに1回よりも頻繁にトランザクションを生成 するべきではない[SHOULD NOT]。TaとSTUN再送信タイマー(RTO)を設定する方法についてのガイダンスはセクション14を参照 のこと。

エージェントはBindingまたはAllocate応答を受信する。Allocateレスポンスが成功すると、エージェントは(マップされたアドレスから 得た)server-reflexive候補と、XOR-RELAYED-ADDRESS属性のrelayed候補を提供する。サーバーにそれを満たすリソースがないためにAllocateリクエストが拒否された場合、 エージェントは代わりにサーバーリフレクティブ候補を取得するためにBindingリクエストを 送るべきである[SHOULD]。Binding応答は、エージェントに(同じくマップされたアドレスから得られる)サーバーリフレクシブ候補のみを提供する。サーバー反射候補のベースは、AllocateまたはBindingリクエストが送信されたホスト候補である。中継される候補のベースは、その候補自身である。中継される候補がホスト候補と同一である場合(まれに起こりうる)、中継される候補は破棄されなけれ ばならない(MUST)。

IPv6専用エージェントがNAT64[RFC6146]とDNS64[RFC6147]の技術を利用する ネットワーク内にある場合、IPv4専用のSTUNまたはTURNサーバーから IPv4サーバー反射型および/または中継型の候補も収集できるかもしれない。IPv6専用エージェントは、NAT64が使用するIPv6プレフィックスを発見する ためにIPv6プレフィックス発見[RFC7050]を利用し、それに応じて各IPv6 専用インターフェースのサーバーリフレクティブ候補を生成するべきである(SHOULD)。NAT64のサーバー反射候補は、IPv4のサーバー反射候補と同様に優先順位を付けられる。

5.1.1.3.コンピューティングの基礎
ICEエージェントは、各候補者に財団を割り当てます。以下のすべてが当てはまる場合、2人の候補者は同じ土台を持つ。

o 同じタイプ（ホスト、リレー、サーバーリフレッシブ、ピアリフレッシブ）である。

o それらのベースは同じIPアドレスを持っている（ポートは異なっていてもよい）。

o 反射型候補と中継型候補については、取得に使用されるSTUNまたはTURNサーバーが同じIPアドレス（エージェントがSTUNまたはTURNサーバーに連絡するために使用するIPアドレス）であること。

o 同じトランスポートプロトコル（TCP、UDP）を用いて取得したものであること。

同様に、2つの候補は、タイプが異なる場合、拠点が異なるIPアドレスを持つ場合、取得に使用したSTUNまたはTURNサーバーが異なるIPアドレス（エージェントがSTUNまたはTURNサーバーに連絡するために使用するIPアドレス）、または転送プロトコルが異なる場合に、異なる基盤を持つ。

5.1.1.4.候補者の維持
いったんserver-reflexive候補とrelayed候補が割り当てられると、セクション8.3 で述べられているように、それらはICE処理が完了するまで存続させられなければ ならない[MUST]。Bindingリクエストで知ったserver-reflexive候補については、サーバ ーへの追加のBindingリクエストによってバインディングを存続させなければなら ない[MUST]。アロケーションのためのリフレッシュは、[RFC5766]で述べられているよう に、リフレッシュトランザクションを使用して行われる。Refreshリクエストはサーバーリフレク ティブ候補もリフレッシュする。

ホスト候補がタイムアウトすることはないが、候補アドレスは、多くの理由 で変更または消滅する可能性がある。ICEエージェントは使用するインターフェイスを監視し、ベースが消滅した候補を 無効にし、新しいIPアドレス(新しいまたは現在使用しているインターフェイス上)が 現れたら、適宜新しい候補を取得すべきである[SHOULD]。

5.1.2.候補者の優先順位付け
優先順位付けの結果、各候補に優先順位が割り当てられる。データストリームの各候補は、1～(2**31 - 1)の正の整数である固有の優先度を持たなければ ならない[MUST]。この優先度は、ICEが接続性チェックの順序と候補の相対的な優先順位を決定するために 使用される。優先順位の高い値は、低い値よりも優先されます。

ICEエージェントは、セクション5.1.2.1の式を使用してこの優先度を計算し、セク ション5.1.2.2のガイドラインを使用してそのパラメータを選択すべきである [SHOULD]。エージェントが異なる式を使用することを選択した場合、エージェントのチェッ クが調整されないため、ICEは収束に時間がかかるかもしれない。

候補の優先順位付けのプロセスは、開始側と応答側のエージェントで共通です。

5.1.2.1.推奨される計算式
推奨式は、候補の種類（server reflexive, peer reflexive, relayed, host）のプリファレンス、候補を取得したIPアドレスのプリファレンス、およびコンポーネントIDを以下の式で組み合わせたものである。

   優先度=（2 ^ 24）*（タイプ設定）+
              （2 ^ 8）*（地域の好み）+
              （2 ^ 0）*（256-コンポーネントID）

タイプの優先順位は0(最低の優先順位)から126(最高の優先順位)までの整数で なければならず(MUST)、同じタイプの候補者すべてに対して同一でなければならず、 異なるタイプの候補者については異なっていなければならない(MUST)。ピアリフレクティブ候補のタイププリファレンスは、サーバリフレクティブ候補のそれよりも高くなければならない(MUST)。この値を0に設定すると、このタイプの候補は最後の手段としてのみ使用されることを意味する。セクション5.1.1の手順に基づいて収集された候補がpeer-reflexive候補になることは ないことに注意。このタイプの候補は、ICEが実行する接続性チェックから学習される。

ローカルプリファレンスは、0(最低プリファレンス)から65535(最高プリファレンス)までの 整数でなければならない[MUST]。IPアドレスが1つしかない場合、この値は65535に設定されるべきである(SHOULD)。特定のデータストリームの特定のコンポーネントに、同じタイプの候補が複数ある場 合、ローカルプリファレンスはそれぞれ一意でなければならない[MUST]。ICEエージェントがデュアルスタックの場合、[RFC8421]に記載されている現在のベストプラク ティスにしたがってローカルプリファレンスを設定すべきである[SHOULD]。

コンポーネントIDは、1以上256以下の整数でなければならない（MUST）。

5.1.2.2.タイプおよびローカルプリファレンスを選択するためのガイドライン
タイププリファレンスの推奨値（RECOMMENDED）は、ホスト候補は126、ピアリフレクティブ候補は110、サーバリフレクティブ候補は100、リレイディッド候補は0である。

ICEエージェントがマルチホームで複数のIPアドレスを持つ場合、[RFC8421]の推奨に 従うべきである[SHOULD]。複数のTURNサーバーを使用する場合、TURNサーバーから取得した候補のローカル優先順位は、 マルチホームのローカル候補と同様の方法で選択する。ローカル優先順位値は、異なる サーバー間の優先順位を示すために使用するが、優先順位はそれぞれで一意でなければ ならない[MUST]。

タイププリファレンスを選択する際、エージェントは遅延、パケットロス、コスト、ネットワークトポロジー、セキュリティ、プライバシーなどの要素を考慮することができる。

5.1.3.冗長な候補の排除
次に、ICEエージェント（開始側と応答側）は、冗長な候補を排除する。2つの候補が同じトランスポートアドレスを持ちながら、異なるベース を持つことがあるが、これらは冗長とはみなされない。エージェントがNATの後ろにいない場合、サーバー反射の候補とホストの候補が冗長になることがよくある。候補は、そのトランスポートアドレスとベースが他の候補のものと等しい場合にのみ、冗長である。エージェントは、より低い優先度で冗長な候補を排除すべきである(SHOULD)。

5.2.Lite 導入手順
Liteの実装では、ホスト候補のみを利用する。IPアドレスファミリーに依存しない各IPアドレスに対して、0個または1個の候補が存在しな ければならない(MUST)。Lite実装では、ICEは候補の中から動的に選択するために使用することはでき ない。したがって、特定のIPアドレスファミリから複数の候補を含めることは推奨さ れない[NOT RECOMMENDED]。接続性チェックだけが、1つのアドレスを使用するか他 のアドレスを使用するかを本当に決定することができるからである。その代わりに、複数のパブリックIPアドレスを持つエージェントは、そのアド レスを最適に使用するために、完全なICE実装を実行することが推奨されます(RECOMMENDED)。

各コンポーネントには、「コンポーネントID」と呼ばれるIDが割り当てられている。RTP/RTCPデータストリームの場合、RTCPがRTPと同じポートに多重化されて いない限り、RTP自体はコンポーネントID 1、RTCPはコンポーネントID 2を持つ。 エージェントが多重化せずにRTCPを使用している場合、その候補を取得しなければならな い[MUST]。ただし、このようにコンポーネントID 2がないことは、RTCP/RTP多重化を使用していないことを意味しない。

各候補には基盤が割り当てられる。ファンデーションは、異なるIPアドレスから割り当てられた2つの候補について は異なっていなければならず(MUST)、そうでなければ同じでなければならない(MUST)。そうでなければ、同じでなければならない(MUST)。各IPアド レスごとに増加する単純な整数で十分である。さらに、各候補には、同じデータストリームの全候補の中で一意の優先度を割り当てなけれ ばならない[MUST]。セクション5.1.2.1の計算式を使用して優先度を計算する場合、タイププリファレンスの値 は126に設定されるべきである(SHOULD)。ホストがIPv4のみの場合、ローカルプリファレンス値は65535に設定されるべきである(SHOULD)。ホストがIPv6またはデュアルスタックの場合、ローカルプリファレンス値は、RFC6724 [RFC6724]に記述されているIPアドレスの優先順位値に設定されるべきである(SHOULD)。

次に、エージェントは各データストリームの各コンポーネントに対して、 デフォルトの候補を選択する。ホストがIPv4のみの場合、各データストリームの各コンポーネントの候補は1つだ けであるため、その候補がデフォルトとなる。ホストがIPv6のみの場合、デフォルトの候補は、通常、グローバルにスコープさ れたIPv6アドレスである。デュアルスタックホストは、デフォルトの候補にIPv4またはIPv6のどちらを使用するか の設定を許可すべきであり(SHOULD)、その設定は、管理者が現在のネットワーク環境 で成功する確率が高いと信じる方に基づく必要がある。

このセクションの手順は、開始側と応答側のエージェントに共通です。

5.3.候補者情報の交換
ICEエージェント（開始側と応答側）は、交換される候補について以下の情報を必要とする。各ICE使用法は、使用するプロトコルとどのように情報を交換するかを定義しなけれ ばならない(MUST)。このセクションでは、交換される必要がある情報について説明する。

候補者1人または複数の候補者。各候補者について

アドレス。候補のIPアドレスとトランスポートプロトコルポート。

トランスポート。候補のトランスポートプロトコル。使用するプロトコルが単一のトランスポートプロトコル上でしか動作しない場合、これは省略してもよい(MAY)。

ファンデーション。最大32文字までの文字列。

コンポーネントID。候補のコンポーネントID。使用するプロトコルがコンポーネントの概念を使用しない場合は省略してもよい（MAY）。

優先度。候補の32ビット優先度。

タイプ。候補者のタイプ。

Related Address and Port: 候補者の関連IPアドレスとポート。これらは、エージェントがプライバシー上の理由などで明らかにしたくない場合は、省略するか無効な値に設定してもよい(MAY)。

拡張可能なパラメータ。使用するプロトコルは、将来的に候補者ごとの新しいICEパラメータを追加する手段を定義するかもしれない。

Lite or Full: エージェントがライトエージェントであるかフルエージェントであるか。

Connectivity-Check Pacing Value（接続性チェックのペース配分値）。エージェントが使用したい接続性チェックのペーシング値。エージェントが定義されたデフォルト値の使用を希望する場合、これは省略してもよい(MAY)。

Username Fragment and Password: 接続性チェックに使用される値。パスワードの生成には少なくとも128ビットの乱数発生器の出力が、ユーザ名フラグメントの生成には少なくとも24ビットの出力が使用され、値は推測不可能でなければならない(MUST)。

拡張機能。新しいメディアストリームまたはセッションレベルの属性（ICEオプション）。

使用するプロトコルがICEの不一致に対して脆弱であり、それを検出できる場合 (セクション5.4)、検出するエージェントがその相手にこの情報を伝える方法が必要である。これはブーリアン・フラグである。

使用プロトコルは、ICEをサポートしない古い実装との後方互換性に対処する必要があるかもしれません（ないかもしれません）。非ICEへのフォールバックメカニズムがサポートされ、使用されている場合、usingプロトコルは、ICEパラメータに加えて、デフォルト候補（そのIPアドレスとポート）を伝達する方法を提供すると思われる。

エージェントがその候補情報を送信すると、エージェントは各候補でSTUNとデータパケットの両方を受信する準備をしなければならない(MUST)。セクション12.1で議論したように、データパケットは、候補がデータのデフォルトデスティネーションとして現れる前に、候補に送信することができる。

5.4.ICEミスマッチ
ALGなどの特定のミドルボックスは、ICEを破壊する方法でシグナリング情報を 変更することができる(たとえば、SDPのIPアドレスを書き換えるなど)。これは「ICE mismatch」(ICEの不一致)と呼ばれる。使用するプロトコルがICEミスマッチに対して脆弱な場合、応答側エージェントは それを検出し、ICEミスマッチについて相手側ICEエージェントに通知できる必要があ る。

各使用プロトコルは、ICE不一致に対する脆弱性の有無、ICE不一致の検出方法、ICE不一致検出時の具体的な動作の必要性を定義する必要があります。

6.ICE候補者処理
ICEエージェントは、候補を集め、相手と候補を交換したら(セクション5)、自身の役割を決定する。さらに、完全な実装では、チェックリストを形成し、ピアとの接続性チェックを開始します。

6.1.完全実施に向けた手続き
6.1.1.役割の決定
各セッションでは、ICEエージェント（開始側と応答側）がそれぞれ役割を担います。役割には、制御と被制御の2つがある。制御エージェントは、通信に使用される最終候補ペアの選択に責任を負う。以下の節では、制御側と被制御側のエージェントが実際に行う手順を詳しく説明する。

役割と行動への影響を判断するためのルールは以下の通りです。

両エージェントとも満席である。ICE処理を開始した開始側エージェントは、制御する役割を担わなければ ならず(MUST)、もう一方のエージェントは制御される役割を担わなければな らない(MUST)。両エージェントは、チェックリストを作成し、ICEステートマシンを実行し、 接続性チェックを生成する。制御側エージェントは、セクション8.1のロジックを実行して、(指名に関連する 接続性チェックが成功すれば)選択されたペアとなるペアを指名し、両エージェント はセクション8.1.2の記述に従ってICEを終了させる。

フルエージェント1名、ライトエージェント1名。フルエージェントは制御する役割を担わなければならず(MUST)、ライトエージェントは制御される役割を担わなければならない(MUST)。フルエージェントはチェックリストを作成し、ICEステートマシンを実行し、 接続性チェックを生成する。そのエージェントは、(指名に関連する接続性チェックが成功した場合) 選択されたペアとなるペアを指名するためにセクション8.1の論理を実行し、 ICEを終了するためにセクション8.1.2の論理を使用する。liteの実装では、単に接続性チェックを待ち、それを受信して応答し、8.2節で説明するようにICEを終了させる。liteの実装では、各データストリームのICE処理の状態をRunningとし、ICE全体の状態をRunningとする。

どちらもライトICE処理を開始した開始エージェントは、制御する役割を負わなければな らず[MUST]、他方は制御される役割を負わなければならない[MUST]。この場合、接続性チェックは送信されない。むしろ、候補が交換されると、各エージェントは接続性チェックを行わず にセクション8で説明されている処理を実行する。両エージェントが、自分が被制御者である、あるいは支配者であると思い込む可能性がある。後者の場合、候補の交換を可能にするシグナリングプロトコルのグレア検出機能により、競合は解決される。各データストリームのICE処理の状態は「実行中」であり、ICE全体の状態は「実行中」であると考えられる。

セッションの役割が決定されると、その役割はセッションの有効期間中存続す る。役割はICE再起動の一部として再決定することができる(セクション9)が、 ICEエージェントは、以下の基準のうち1つ以上が満たされない限り、ICE再起動の一部として 役割を再決定してはならない(MUST NOT)。

Full becomes lite: コントロールエージェントがフルで、liteに切り替えた場合、ピアエージェントもフルであれば、役割を再決定しなければならない(MUST)。

役割の衝突：ICE再起動により役割の衝突が発生した場合、7.3.1.1項の役割の衝突の手順により、役割を再決定することができる。

注：ICE再起動により役割の衝突が発生する可能性がある、特定のサードパーティ呼制御（3PCC） [RFC3725]のシナリオが存在します。

注：エージェントは、役割が決定される前に、フルかライトかを互いに通知する必要がある。そのためのメカニズムは、シグナルプロトコルに固有のものであり、このドキュメントの範囲外である。

エージェントは，相手が役割の再決定を開始した場合，そのための基準が満たされていなくても，受け入れなければならない(MUST)。これは，相手がRFC5245に準拠している場合に起こり得ることである。

6.1.2.チェックリストの作成
各データストリームに1つのチェックリストが存在する。チェックリストを作成するために、開始側と応答側のICEエージェントは、候補ペアの形成、ペアの優先度の計算、優先度によるペアの順序付け、ペアの刈り込み、優先度の低いペアの削除、チェックリストの状態設定を行います。チェックリストに候補が追加された場合（例えば、ピアリフレクティブ候補の検出による）、エージェントは更新されたチェックリストに対してこれらの手順を再実行する。

6.1.2.1.チェックリストの状態
各チェックリストには状態があり、そのチェックリストに関連するデータストリームのICEチェックの状態を把握することができます。状態は以下の通りです。

実行中です。チェックリストは、まだ「完了」でも「失敗」でもありません。チェックリストは、初期状態では実行状態に設定されています。

完了しました。チェックリストには、データストリームの各コンポーネントについて、指名されたペアが含まれています。

失敗。データストリームの各コンポーネントに対して有効なペアがなく、チェックリストの候補ペアがすべてFailedまたはSucceededの状態になっている。つまり、チェックリストの少なくとも1つのコンポーネントの候補ペアがすべてFailedの状態であり、そのコンポーネントが失敗した、つまりチェックリストが失敗したことを意味する。

6.1.2.2.候補ペアの形成
ICEエージェントは、同じデータストリームの同じコンポーネントの各ローカル候補と、同じIPアドレスファミリーの各リモート候補をペアリングします。ローカル候補の一部がリモート候補とペアにならず、リモート候補の一部が ローカル候補とペアにならない可能性があります。これは、1つのエージェントがデータストリームの全コンポーネントの候補を含んでいない場合に発生する可能性があります。この場合、そのデータストリームのコンポーネント数は事実上減少し、データストリームのすべてのコンポーネントにわたって各エージェントが提供する最大コンポーネントIDの、両方のエージェントにわたる最小値に等しいとみなされる。

RTPの場合、一方のエージェントがRTCPの候補を提供し、他方が提供し ない場合に発生する可能性がある。別の例として、開始側エージェントは、同じポートでRTPとRTCPを多重化すること ができる[RFC5761]。しかし、開始側エージェントは、相手側エージェントがそのような多重化 を実行できるかどうか知らないため、RTPとRTCPを別々のポートに候補を含める。ピアエージェントがこのような多重化を実行できる場合、各候補に単一コン ポーネント(RTP/RTCP muxの組み合わせ)だけを含めることになる。ICEは、あたかもこの候補のための単一コンポーネントがあるかのように動作することになります。

IPv6では、各インターフェースに対して複数のホスト候補を持つことが一般的である。結果として生じる候補ペアの量を適切に保ち、動作する可能性が極めて低い候補ペアを避けるために、IPv6のリンクローカルアドレスはリンクローカルアドレス以外とペアリングしてはならない(MUST NOT)。

ローカル候補とリモート候補の両方が特定のコンポーネントのデフォルト候補である候補ペアを、そのコンポーネントの「デフォルト候補ペア」と呼びます。これは、両エージェントがICEを意識していなかった場合に、データ転送に使用されるペアである。

図5は、トランスポートアドレス、候補、候補ペア、チェックリストの性質と関係を示す。

              +--------------------------------------------+
              |                                            |
              | +---------------------+                    |
              | |+----+ +----+ +----+ |   +Type            |
              | || IP | |Port| |Tran| |   +Priority        |
              | ||Addr| |    | |    | |   +Foundation      |
              | |+----+ +----+ +----+ |   +Component ID    |
              | |      Transport      |   +Related Address |
              | |        Addr         |                    |
              | +---------------------+   +Base            |
              |             Candidate                      |
              +--------------------------------------------+
              *                                         *
              *    *************************************
              *    *
            +-------------------------------+
            |                               |
            | Local     Remote              |
            | +----+    +----+   +default?  |
            | |Cand|    |Cand|   +valid?    |
            | +----+    +----+   +nominated?|
            |                    +State     |
            |                               |
            |                               |
            |          Candidate Pair       |
            +-------------------------------+
            *                              *
            *                  ************
            *                  *
            +------------------+
            |  Candidate Pair  |
            +------------------+
            +------------------+
            |  Candidate Pair  |
            +------------------+
            +------------------+
            |  Candidate Pair  |
            +------------------+

                 Checklist

図5：チェックリストの概念図

6.1.2.3.ペアの優先順位の計算とペアの順序付け
ICEエージェントは、各候補ペアの優先順位を計算する。制御側エージェントから提供された候補の優先順位をGとする。被制御側エージェントから提供された候補の優先順位をDとする。ペアの優先度は以下のように計算される。

      ペア優先度 = 2^32*MIN(G,D) + 2*MAX(G,D) + (G>D?1:0)        
エージェントは、各チェックリストを候補ペアの優先順位の降順に並べ替えます。2つのペアが同じ優先度を持つ場合、それらの間の順序は任意である。

6.1.2.4.ペアの刈り込み
この並べ替えられたペア候補のリストは、実行される接続性チェックの順序を決定するために使用される。各チェックでは、ローカル候補からリモート候補にリクエストを送信する。ICEエージェントは、反射的な候補(サーバー反射的またはピア反射的)からは直接リク エストを送信できず、ベースからしか送信できないので、エージェントは次に、候補ペ アのソートされたリストを通過する。ローカル候補が反射的である各ペアについて、候補はそのベースに置き換えられなけれ ばならない[MUST]。

エージェントは、各チェックリストを整理します。これは、同じチェックリストの中でより優先順位の高い候補ペアと冗長である場合に、その候補ペアを削除することで行われます。2つの候補ペアは、ローカル候補が同じベースを持っていて、リモート候補が同じであれば、冗長となります。その結果、そのデータストリームの「チェックリスト」と呼ばれる、順番に並べられた候補ペアの列ができあがります。

6.1.2.5.低優先度ペアの削除
セクション19.5.1に記載されている攻撃を制限するために、ICEエージェントは、チェックリスト セット内のすべてのチェックリストに対してエージェントが実行する接続性チェックの総数を 制限しなければならない[MUST]。これは、チェックリストセット内の候補ペアの総数を制限することによって行われる。チェックリストセットの候補ペアのデフォルトの上限は100ですが、値は設定可能でなければなりません（MUST）。この制限は、各チェックリスト内で、チェックリスト集合の候補ペアの総数が制限値より少なくなるまで、優先順位の低い候補ペアを破棄することによって実施されます。各チェックリストの候補ペアの数が同じだけ減るように、破棄は均等に行われるべきである(SHOULD)。

可能であれば、デフォルト値よりも低い制限値を選び、この値は実際の展開構成で作成される可能性のある候補ペアの最大数に設定することが推奨される(RECOMMENDED)。設定に関する要件は、配備後にこの値が問題であることが判明した場合に、現場で修正するためのツールを提供することを意図しています。

6.1.2.6.ペア候補の状態計算
チェックリストの各候補ペアは、基礎（ペアのローカル候補とリモート候補の基礎の組み合わせ）と、以下のいずれかの状態を持つ。

待機中です。このペアに対してチェックは送信されていないが、ペアはFrozenではない。

進行中です。このペアに対して小切手が送信されましたが、トランザクションは進行中です。

成功しました。このペアに対してチェックが送信され、成功した。

失敗しました。このペアに対してチェックが送信されましたが、失敗しました（チェックに対する応答が受信されなかったか、失敗の応答が受信されました）。

凍結されています。このペアのチェックは送信されておらず、ペアの凍結が解除されてWaiting状態に移行するまで送信することができない。

ペアは図6のように状態間を移動する。

      +-----------+
      |           |
      |           |
      |  Frozen   |
      |           |
      |           |
      +-----------+
            |
            |unfreeze
            |
            V
      +-----------+         +-----------+
      |           |         |           |
      |           | perform |           |
      |  Waiting  |-------->|In-Progress|
      |           |         |           |
      |           |         |           |
      +-----------+         +-----------+
                                  / |
                                //  |
                              //    |
                            //      |
                           /        |
                         //         |
               failure //           |success
                     //             |
                    /               |
                  //                |
                //                  |
              //                    |
             V                      V
      +-----------+         +-----------+
      |           |         |           |
      |           |         |           |
      |   Failed  |         | Succeeded |
      |           |         |           |
      |           |         |           |
      +-----------+         +-----------+

図6：ペアステート有限ステートマシン（FSM）

チェックリストの各ペアの初期状態は、以下の一連のステップを実行することで算出される。

1.チェックリストは、「チェックリスト・セット」と呼ばれる順序付きリスト（順序は各ICEの用途によって決定される）に配置される。

2.ICEエージェントは、最初にすべての候補ペアをFrozen状態にする。

3.エージェントは、チェックリスト・セット内のすべてのチェックリストを実行状態に設定します。

4.各基盤について、エージェントはちょうど1つの候補ペアの状態を「待機中」に設定する（凍結を解除する）。凍結解除する候補ペアは、その基盤を持つ最初のチェックリスト（使用法で定義されたチェックリストのセット順に従って）の中から、（コンポーネントIDが小さい順に並び、コンポーネントIDが同じなら優先順位が高い）最初の候補ペアを見つけることによって選択される。

注：上記の手順は、RFC5245では、最初のチェックリストにある候補ペアのみが初期状態でWaiting状態に置かれていましたが、それとは異なります。現在は、チェックリストセットの最初のチェックリストでなくても、その土台となる最初のチェックリストの候補ペアに適用されます。

下表はその一例です。

表の凡例

各行(m1, m2,...) は、データストリームに関連するチェックリストを表し、m1 はチェックリスト集合の最初のチェックリストを表します。

各列(f1, f2,...)は土台を表す。ある列内の候補ペアはすべて同じ土台を共有している。

f-cpはFrozen状態のペア候補を表す。

w-cpは待機中の候補ペアを表す。

1.エージェントはチェックリスト・セット内のすべてのペアをFrozen状態に設定する。

         f1 f2 f3 f4 f5
       -----------------------------
   m1 | f-cp f-cp f-cp
      |
   m2 | f-cp f-cp f-cp f-cp
      |
   m3 | f-cp f-cp
2.各基盤について、同じ基盤に関連する候補ペアがチェックリストセットの他の検査済みチェックリストの1つで既に待機状態に置かれていない限り、最も低いコンポーネントIDを持つ候補ペアが待機状態に置かれます。

         f1 f2 f3 f4 f5
       -----------------------------
   m1 | w-cp w-cp w-cp
      |
   m2 | f-cp f-cp f-cp w-cp
      |
   m3 | f-cp w-cp
        
表1：ペア状態の例

最初のチェックリスト（m1）では、同じ財団のペアがまだ待機状態に置かれていないため、各財団の候補ペアが待機状態に置かれます。

2つ目のチェックリスト(m2)では、基礎f4の候補ペアがWaiting状態にされる。基礎f1、f2、f3の候補ペアは、すでに待機状態（チェックリストm1内）であるため、凍結状態（Frozen）とする。

3つ目のチェックリスト(m3)では、基盤f5の候補ペアがWaiting状態になる。財団f1の候補ペアは、（チェックリストm1内で）すでに待機状態になっているため、凍結状態になっている。

各チェックリストが処理されると、チェックリストの各基盤の候補ペアが1つずつ待機状態になります。

6.1.3.ICEステート
ICEエージェントの状態は、チェックリストの状態によって決まります。すべてのチェックリストが完了した場合はCompleted、すべてのチェックリストが失敗した場合はFailed、それ以外はRunningとなる。

6.1.4.スケジューリングチェック
6.1.4.1.トリガーチェックキュー
ICEエージェントがチェックリストを計算し、セクション6.1.2で説明したようにチェックリスト セットを作成したら、エージェントは接続性チェック（通常とトリガー）の実行を開始します。トリガされた接続性チェックのために、エージェントは、"triggered-check queue "と呼ばれる、各チェックリストのためのFIFOキューを維持し、それは、チェックが次の可能な機会に送信されるべき候補ペアを含んでいます。トリガーチェックキューは、最初は空である。

6.1.4.2.接続性チェックの実行
通常接続チェックとトリガ接続チェックの生成は、タイマTaによって制御される。チェックリスト集合の候補ペアの初期状態が設定されるとすぐに、実行状態の最初のチェックリスト内の候補ペアに対して、第7節の手順に従ってチェックが実行される。その後、Taが発生するたびに、チェックリスト集合の次の実行状態のチェックリストを選択し、そのチェックリスト内の候補をチェックする。チェックリスト集合の実行状態の最後のチェックリストが処理された後、最初のチェックリストが再び選択される、など。

Taが発火するたびに、ICEエージェントは以下の手順で選んだチェックリスト内の候補ペアのチェックを実行する。

1.チェックリストに関連するトリガーチェック・キューが1つ以上の候補ペアを含んでいる場合、エージェントはキューから一番上のペアを取り除き、そのペアに対して接続性チェックを行い、候補ペアの状態を進行中にして、それ以降のステップを中止します。

2.Waiting 状態の候補ペアがなく，Frozen 状態のペアが1つ以上ある場合，エージェントは Frozen 状態の各ペアに関連する基盤をチェックする．ある財団について、（チェックリスト・セットのどのチェックリストにも）Waiting または In-Progress 状態のペアがなければ、エージェントは候補ペアの状態を Waiting にして、次のステップに進む。

3.Waiting状態の候補ペアが1つ以上ある場合、エージェントはWaiting状態の中で最も優先度の高い候補ペアを選び（同じ優先度のペアが複数ある場合は、コンポーネントIDが最も小さいペアを選ぶ）、そのペアに対して接続性チェックを行い、候補ペア状態をIn-Progressにして、以降の手順を中止します。

4.このステップに到達した場合、ピッキングされたチェックリストに対して、どのチェックも行うことができなかった。そこで、再びタイマーTaが切れるのを待たずに、次の実行中のチェックリストを選び、ステップ1に戻ります。もし、実行中のチェックリストがすべてこの状態になったら、つまり、接続性チェックを行う候補ペアが残らなかったら、このステップを中止してください。

エージェントが接続性チェックを行う候補ペアを選ぶと、エージェントはチェックを開始し、ペアのローカル候補に関連する基地からペアのリモート候補に、セクション7.2.4で説明したようにバインド要求を送信します。

ローカルポリシーに基づき、エージェントは、チェックリストセット内の1つ以上のチェックリストの接続性チェックの実行を、いつでも終了することを選択してもよい(MAY)。しかし、ICEを終了させることができるのは、制御するエージェントだけである（セクション8）。

チェックのためのメッセージの完全性を計算するために、エージェントはピアから得た候補情報から学んだリモートのユーザ名の断片とパスワードを使用します。ローカルユーザ名の断片は、エージェントが自身の候補について直接知っています。

6.2. Liteの実装手順
Liteの実装では、ピアのICEサポートの確認とICE処理におけるピアの役割の決定を除き、セクション6のほとんどのステップをスキップすることができます。

ライト実装が制御エージェントの場合(相手ICEエージェントもライト実装の場合のみ)、 候補交換におけるものに基づいて候補ペアを選択し(IPv4では、ペアは1つだけ)、 必要に応じて、その選択を反映した新しい候補情報で相手を更新する(IPv4のみのホストでは決して必要で はない)。

7.接続性チェックの実行
ここでは、接続性チェックの方法について説明します。

ICEエージェントは、[RFC5389]に準拠しなければならない[MUST]。フル実装はSTUNクライアントとSTUNサーバーの両方として動作し、ライト実装は STUNサーバーとしてのみ動作する（接続性チェックを生成しないため）。

7.1.STUN拡張機能
ICEはSTUNを属性で拡張したものである。PRIORITY、USE-CANDIDATE、ICE-CONTROLLED、およびICE-CONTROLLINGの属性でSTUNを拡張する。これらの属性は、セクション16.1において正式に定義されている。この節では、属性の使用法を説明する。

この属性は、ICE接続性チェックにのみ適用される。

7.1.1.優先順位
PRIORITY属性はバインディングリクエストに含まれなければならず、ローカル候補に ついてセクション5.1.2のアルゴリズムで計算された値を設定しなければならないが、 ピアリフレクティブ候補の候補タイプの優先順位を設定しなければならない。

7.1.2.USE-CANDIDATE
制御エージェントは、候補ペアを指名するためにUSE-CANDIDATE属性を含まなければならない(MUST)(セクション8.1.1)。被コントロールエージェントは，バインディングリクエストにUSE-CANDIDATE属性を含んではならない(MUST NOT)。

7.1.3.ICE-CONTROLLEDおよびICE-CONTROLLING
コントロールエージェントは，バインディングリクエストにICE-CONTROLLING属性を含まなければならない(MUST)。制御されるエージェントは，BindingリクエストにICE-CONTROLLED属性を含まなければならない(MUST)。

ICE役割の競合が発生した場合、どちらかの属性の内容がタイブレーク値として使用される（7.3.1.1項）。

7.2.STUNクライアントプロシージャ
7.2.1.中継候補者のパーミッションの作成
接続性チェックが中継されたローカル候補を使用して送信される場合、クライアントは、以前に許可を作成していなければ、最初に許可を作成しなければならない(MUST)。TURNサーバーに、リモート候補のIPアドレスに向けて、指定された中継候補の許可を作成するよう指示した場合、以前に作成されていたことになる。許可を作成するために、ICEエージェントは[RFC5766]で定義されている手順に従う。許可は、リモート候補のIPアドレスに対して作成されなければならない[MUST]。エージェントはICEが完了するまでTURNチャネルの作成を延期することが推奨される [RECOMMENDED]。その場合、接続性チェックのためのパーミッションは通常、CreatePermissionリク エストを使用して作成される。いったん確立されると、エージェントはICEが終了するまで、その許可を 有効に保たなければならない[MUST]。

7.2.2.クレデンシャルの形成
接続性チェックのバインディングリクエストは、STUN短期クレデンシャルメカニズムを利用しなければならない（MUST）。

認証情報のユーザー名は、ピアから提供されたユーザー名断片と、リクエストを 送るICEエージェントのユーザー名断片をコロン(":")で区切って連結することで形成され る。

パスワードは、ピアから提供されたパスワードと同じです。

たとえば、ICEエージェントLが開始エージェントで、ICEエージェントRが応答エージェントである場合を考えてみよう。L捜査官は候補者のユーザー名としてLFRAGを、パスワードとしてLPASSを含む。エージェントRは、ユーザー名としてRFRAG、パスワードとしてRPASSを提供しました。LからRへの接続チェックは、ユーザー名RFRAG:LFRAGとパスワードRPASSを利用する。RからLへの接続性チェックは、ユーザー名LFRAG:RFRAGとパスワードLPASSを使用する。応答はリクエストと同じユーザー名とパスワードを使用する(応答にUSERNAME属性が存在しないことに注意)。

7.2.3.Diffserv処理
エージェントが送信するデータパケットにDSCP(Differentiated Services Code Point)[RFC2475]を使用している場合、エージェントは送信するBindingリクエストと応答に同じマーキングを適用するべきである[SHOULD]。

データパケットに複数のDSCPマークが使用されている場合、エージェントは接続性チェックで使用するためにそれらのうちの一つを選択するべきである(SHOULD)。

7.2.4.リクエストの送信
接続性チェックは、ローカル候補に関連するベースからリモート候補にバインディ ングリクエストを送ることで生成される。[RFC5389]では、バインドリクエストがどのように構築され、生成されるかを 説明している。

接続性チェックの実行時に、RFC3489との後方互換性のサポートを仮定しては ならない[MUST NOT]。接続性チェックには、FINGERPRINT機構を使用しなければならない(MUST)。

7.2.5.レスポンスの処理
このセクションでは、ICE接続性チェックに特有のバインドレスポンスを処理するための追加手順を定義する。

Bindingレスポンスを受信すると，トランザクションID[RFC5389]を用いて対応するBindingリクエストと関連付けられ，Bindingリクエストが送信された候補ペアとレスポンスが関連付けられる。その後，応答は以下の手順に従い，役割の衝突，失敗，成功の各処理を行う．

7.2.5.1.役割の相反
バインディングリクエストが487(Role Conflict)エラー応答(セクション7.3.1.1)を生成し、 ICEエージェントがリクエストにICE-CONTROLLED属性を含んだ場合、エージェントは コントロールするロールに切り替わらなければならない[MUST]。ICEエージェントがリクエストにICE-CONTROLLING属性を含んでいた場合、エー ジェントは制御される役割に切り替えなければならない[MUST]。

エージェントがその役割を切り替えたら、エージェントは、そのチェックが 487エラー応答を生成した候補ペアを、そのペアが属するチェックリストに 関連付けられたtriggered-checkキューに追加し、候補ペア状態をWaitingに設定しなけれ ばならない[MUST]。後でトリガされた接続性チェックが実行されるとき、バインディングリクエストのICE-CONTROLLING/ ICE-CONTROLLED属性は、エージェントの新しい役割を示すだろう。エージェントはタイブレーカ値を変更しなければならない(MUST)。

注：ロールスイッチは、優先度の値がロールに依存するため、エージェントがペアの優先度を再計算する必要があります（セクション6.1.2.3)。

注：役割の切り替えは、エージェントが候補ペアの推薦に責任を持つかどうか、ICEが終了した後にエージェントが相手との更新された候補情報の交換を開始する責任を持つかどうかにも影響します。

7.2.5.2.失敗例
ここでは、候補ペアの状態がFailedに設定されている場合について説明します。

注：ICEエージェントは、接続性チェックエラーの結果、候補ペアの状態を「失敗」に設定した場合、同じ基盤を持つ他の候補ペアの状態を変更しません。

7.2.5.2.1.非対称型トランスポートアドレス
ICEエージェントは、Bindingリクエストと応答のソースとデスティネーションの トランスポートアドレスが対称であることを確認しなければならない[MUST]。すなわち、応答のソースIPアドレスとポート は、Bindingリクエストが送られたデスティネーションIPアドレスとポートに等しく なければならず[MUST]、応答のデスティネーションIPアドレスとポートは、Binding リクエストが送られたソースIPアドレスとポートに等しくなければならない[MUST][MUST] ことになる。アドレスが対称でない場合、エージェントは候補ペアのステートをFailedに設定しな ければならない[MUST]。

7.2.5.2.2.ICMPエラー
ICEエージェントは、接続性チェックのためのICMPエラーの処理をサポートしても よい[MAY]。エージェントがICMPエラーの処理をサポートし、BindingリクエストがHard ICMPエラーを生成する場合、エージェントは候補ペアのステートをFailedに設定すべきである(SHOULD)。実装者は、ICMPエラーを処理する方法と方法を決定する際に、ICMPエラーがDoS (Denial-of-Service) 攻撃のための方法として使用できることを認識する必要がある。

7.2.5.2.3.タイムアウト
バインド要求トランザクションがタイムアウトした場合、ICEエージェントは候補ペ アのステートを「Failed」に設定しなければならない[MUST]。

7.2.5.2.4.回復不能な STUN 応答
Bindingリクエストが回復不可能なSTUNエラー応答を生成した場合[RFC5389]、 ICEエージェントは候補ペアステートをFailedに設定すべきである[SHOULD]。

7.2.5.3.成功
接続性チェックは、以下の各基準が真である場合に成功とみなされます。

o バインディング要求が成功応答を生成した。

o バインディングのリクエストとレスポンスにおけるソースとデスティネーションのトランスポートアドレスは対称的である。

チェックが成功とみなされた場合、ICEエージェントは以下のセクションで説明するアクションを（順番に）実行する。

7.2.5.3.1.ピアリフレクティブ候補の発見
ICEエージェントはSTUN応答からマップされたアドレスを確認しなければなら ない[MUST]。トランスポートアドレスが、エージェントが知っているどのローカル候補にも 一致しない場合、マップされたアドレスは新しい候補(peer-reflexive候補)を示 す。他の候補と同様に、ピアリフレックス候補はタイプ、ベース、プライオリティ、ファンデーションを持つ。これらは以下のように計算されます。

o 型はピアリフレクティブである。

o ベースとは、バインディング要求が送信された候補ペアのローカル候補のことである。

o 優先度は、BindingリクエストのPRIORITY属性の値である。

o 基盤については、5.1.1.3 節で説明します。

その後、ピア・リフレックス候補が、そのデータストリームのローカル候補の リストに追加される。ユーザー名の断片とパスワードは、そのデータストリームの他のすべてのローカル候補と同じになります。

ICEエージェントは、セクション7.2.5.3.2の手順により有効なペアが生成されるため、 ピアリフレクティブ候補をリモート候補とペアリングする必要はない。エージェントが、生成される有効なペアの候補以外のリモート候補とピアリフレク ス候補をペアリングしたい場合、エージェントはピアリフレクス候補を含むピアに更新 された候補情報を提供してもよい[MAY]。これにより、ピアリフレックス候補は他のすべてのリモート候補とペアリングされることになります。

7.2.5.3.2.有効なペアの構築
ICEエージェントは、ローカル候補が応答のマップされたアドレスに等しく、 リモート候補がリクエストの送信先アドレスに等しいペアの候補を構築する。これは「有効なペア」と呼ばれる。

有効なペアは、接続性チェックを行ったペア、チェックリスト内の別のペア、または現在チェックリストにないペアのいずれかとなる可能性があります。

エージェントは、「有効リスト」と呼ばれる別のリストを管理する。チェックリスト・セット内の各チェックリストに対して有効なリストがあります。有効リストは有効なペアを含むことになる。初期状態では、各有効リストは空である。

有効リスト内の各有効ペアは、"指名フラグ "と呼ばれるフラグを持つ。有効なペアが有効なリストに追加されると、フラグの値は'false'に設定される。

有効なペアは、以下のように有効なリストに追加されます。

1.有効なペアがチェックを生成したペアと等しい場合、そのペアを、そのペアが属するチェックリストに関連付けられた有効リストに追加します。

2.有効なペアがチェックリストの他のペアと等しい場合、そのペアをそのペアのチェックリストに関連付けられた有効なリストに追加する。チェックを発生させたペアは有効リストに追加されない、または

3.有効なペアがどのチェックリストにもない場合、エージェントは、セクション 6.1.2 のアルゴリズムを用いて、各候補の優先度に基づいてペアの優先度を計算する。ローカル候補の優先度は、そのタイプに依存する。タイプがpeer reflexiveでない限り、優先度は候補交換でその候補にシグナルされた優先度と等しくなる。タイプがpeer reflexiveの場合、それはエージェントがちょうど完了したバインディングリ クエストに置いたPRIORITY属性と等しくなる。リモート候補の優先度は、相手の候補情報から取得されます。もし、そこに候補が表示されない場合は、新しいリモート候補へのチェックがトリガされたことになります。その場合、優先度は、ちょうど完了したチェックをトリガしたバインドリクエストのPRIORITY属性の値とされる。それから、そのペアは有効なリストに追加される。

注：有効なペアがどのチェックリストにもないことはよくあることでしょう。チェックリストには、ローカル候補が決してreflexiveではないペアがあることを思い出してください。 それらのペアは、ローカル候補がreflexive候補のベースに変換され、冗長であれば刈り取られました。Binding要求に対する応答が到着したとき、2つの間にNATがあれば、マップされたアドレスはreflexiveになる。その場合、有効なペアは、チェックリストのどのペアにも一致しないローカル候補を持つことになる。

7.2.5.3.3.ペア候補の状態更新
ICEエージェントは、チェックを生成した候補ペアと構築した有効ペア（異なる可能性がある）の両方の状態をSucceededに設定する。

エージェントは、同じ基盤を持つすべてのチェックリストの他のすべてのフローズン候補ペアの状態をWaitingに設定しなければならない(MUST)。

注：あるチェックリスト内で、同じファウンデーションを持つ候補ペアは、通常、異なるコンポーネントID値を持ちます。

7.2.5.3.4.指名手配フラグを更新する
制御エージェントがUSE-CANDIDATE属性を設定したバインドリクエストを送信し、 ICEエージェントがリクエストに対する成功応答を受信した場合、エージェントはペ アの指名フラグをtrueに設定する。リクエストが失敗した場合(セクション7.2.5.2)、エージェントは候補ペアを有効 リストから削除し、候補ペアステートをFailedに設定し、チェックリストステートを Failedに設定しなければならない[MUST]。

被コントロールエージェントが送信したバインディングリクエストに対する成功応答を受信し、そのバインディングリクエストがUSE-CANDIDATE属性が設定された受信バインディングリクエストによってトリガされた場合(セクション7.3.1.4)、エージェントはペアの指名フラッグを真にセットする。トリガされたリクエストが失敗した場合、エージェントは候補ペアを有効リストから削除し、候補ペアのステートをFailedに設定し、チェックリストのステートをFailedに設定しなければならない[MUST]。

データストリームのコンポーネントに指名フラグが設定されると、そのコンポーネントの ICE 処理が終了する（8項）。

7.2.5.4.チェックリストの状態の更新
接続性チェックが成功したか失敗したかにかかわらず、チェックの完了によりチェックリストの状態の更新が必要になる場合があります。チェックリスト集合の各チェックリストについて、候補ペアのすべてが失敗または成功のいずれかの状態にあり、チェックリストに関連するデータストリームの各コンポーネントの有効なペアが有効リストにない場合、そのチェックリストの状態は失敗に設定されます。有効リストに有効なペアがある場合は、チェックリストの状態をSucceededに設定する。

7.3.STUNサーバーの手順
ICEエージェント（liteまたはfull）は、直近の候補交換に含まれる各候補を基にしたBinding要求を受信できるように準備しなければならない。

エージェントは、リクエストを認証し、メッセージの完全性チェックを実行 するために、短期的な信用証明メカニズム(すなわち、MESSAGE-INTEGRITY属性)を使 用しなければならない[MUST]。同様に、短期的な信用証明書の仕組みは応答にも使用されなけれ ばならない[MUST]。エージェントは、ユーザー名がコロンで区切られた2つの値からなり、最初の値 が進行中のセッションのための候補交換でエージェントが生成したユーザー 名の断片と等しい場合、ユーザー名が有効であるとみなさなければならない[MUST]。開始側のエージェントが、相手から候補を受け取る前にバインディングリ クエストを受け取ることは可能である(実際、その可能性は非常に高い)。これが起こった場合、エージェントは直ちに応答を生成しなければ ならない(セクション7.3.1.2で述べられているように、マッピングされた アドレスの計算を含む)。エージェントはこの時点で、応答を生成するのに十分な情報を持っている；相手からのパスワードは必要ない。すなわち、完全な実装についてはセクション7.3.1.3、7.3.1.4、および7.3.1.5を参照のこと。回答の前に複数のSTUNリクエストを受信する場合、これにより、いくつかのペアがtriggered-checkキューにキューイングされることがある。

エージェントはALTERNATE-SERVERの仕組みを利用してはならず、RFC 5389で定義されている下位互換性の仕組み(RFC 3489のプロトコルとの連携のために)をサポートしてはならない(MUST NOT)。エージェントはFINGERPRINTメカニズムを利用しなければならない(MUST)。

エージェントがそのデータパケットでDSCPマーキング(RFC2475)を使用している場合、それはバインディング応答に同じマーキングを適用するべきである(SHOULD)。エンドポイントがデータパケットに適用する可能性のあるレイヤー2マーキングにも同じことが適用されます。

7.3.1.フル実装のための追加手続き
このサブセクションでは、完全な実装がバインディング要求を受け入れるときに、完全な実装に適用される追加のサーバー手順を定義する。

7.3.1.1.役割の衝突の検出と修復
ICEの特定の使用法（3PCCなど）では、両方のICEエージェントが同じ役割を選択することになり、役割の衝突が発生することがある。このセクションでは、役割の衝突を検知して修復するためのメカニズムに ついて記述する。使用法のドキュメントでは、このメカニズムが必要かどうかを指定しなけれ ばならない[MUST]。

エージェントは、ICE-CONTROLLINGまたはICE-CONTROLLED属性のいずれかについて、バ インディングリクエストを検査しなければならない[MUST]。それは以下の手順に従わなければならない(MUST)。

o エージェントが制御する役割にあり、ICE-CONTROLLING属性がリクエストに 存在する場合。

* エージェントのタイブレーク値がICE-CONTROLLING属性の内容より大きいか等しい場合、エージェントはバインディングエラー応答を生成し、値487（役割の衝突）のERROR-CODE属性を含むが、その役割を維持する。

* エージェントのタイブレーカー値がICE-CONTROLLING属性の内容より小さい場合、エージェントは制御された役割に切り替わります。

o エージェントが制御される役割にあり、ICE-CONTROLLED属性がリクエストに 存在する場合。

* エージェントのタイブレーカ値がICE-CONTROLLED属性の内容より大きいか等しい場合、エージェントは制御する役割に切り替わります。

* エージェントのタイブレーク値がICE-CONTROLLED属性の内容より小さい場合、エージェントはバインディングエラー応答を生成し、値487（役割の競合）のERROR-CODE属性を含むが、その役割を保持する。

o エージェントが被コントロール役にあり、ICE-CONTROLLING属性がリクエスト に存在した場合、あるいはエージェントがコントロール役にあり、ICE-CONTROLLED 属性がリクエストに存在した場合、コンフリクトは発生しない。

役割の変更は、ペアの優先順位(セクション6.1.2.3)を再計算することをエージェントに要求する。役割の変更は、エージェントが指名されたペアを選択し、ICEの終了時に更新された候補情報との交換を開始する責任を負うかどうかにも影響する。

セクション7.3.1の残りのサブセクションは、エージェントがバインディングリクエストに対して成功した応答を生成した場合、たとえエージェントが役割を変更したとしても、それに従います。

7.3.1.2.マッピングされたアドレスの計算
中継される候補で受け取ったリクエストに対して、STUN処理(すなわち、XOR-MAPPED-ADDRESS 属性の生成)に使用されるソーストランスポートアドレスは、TURNサーバーから見た トランスポートアドレスである。そのソース・トランスポート・アドレスは、バインディング・リクエストがData Indicationを通じて配送された場合、Data IndicationメッセージのXOR-PEER-ADDRESS属性に存在することになる。BindingリクエストがChannelDataメッセージを通して配信された場合、ソース・トランスポート・アドレスはチャンネルにバインドされたものである。

7.3.1.3.ピアリフレクティヴ・キャンディデイトの学習
リクエストのソーストランスポートアドレスが既存のリモート候補にマッチしな い場合、それは新しいピアリフレクティブリモート候補を表す。この候補は以下のように構築される。

o 型はピアリフレクティブである。

o 優先度は、BindingリクエストのPRIORITY属性の値である。

o 基盤は任意の値であり、他のすべてのリモート候補の基盤とは異なる。後続の候補交換がこのピアリフレックス候補を含む場合、その候補の実際のファウンデーションを通知することになる。

o コンポーネントIDは、リクエストの送信先であるローカル候補のコンポーネントIDである。

この候補は、リモート候補のリストに追加される。しかし、ICEエージェントはこの候補をローカル候補とペアリングしない。

7.3.1.4.トリガーチェック
次に、エージェントは、ローカル候補が、STUNリクエストを受信したトランス ポートアドレス(エージェントから見て)を持ち、リモート候補が、リクエストが来 たソーストランスポートアドレス(これはちょうど学習したピアリフレクティブ リモート候補であるかもしれない)に等しいペアを構築する。ローカル候補は、ホスト候補(リクエストがリ レーを通して受け取られなかった場合)またはリレーされた候補(リ レーを通して受け取られた場合)のいずれかになる。ローカル候補は決してサーバ ーリレー候補になることはない。両方の候補はエージェントに知られているので、エージェントはそれらの優先順位を 取得し、候補ペアの優先順位を計算することができる。このペアはチェックリストで検索される。いくつかの結果のうちのひとつがありうる。

o ペアがすでにチェックリストに載っている場合。

* そのペアの状態が Succeeded であれば、それ以上は何もしない。

* そのペアの状態がIn-Progressである場合、エージェントはIn-Progressトランザクションをキャンセルする。キャンセルは、エージェントが接続性チェックトランザクションに関連付けられたバインディング要求を再送信せず、応答の欠如を失敗として扱わず、応答のためにトランザクションタイムアウトの期間待つことを意味する。さらに、エージェントは、ペアの新しい接続性チェックを開始するために、チェックリストに関連付けられたトリガーされたチェックリストでペアをエンキューし、ペアのステートをWaitingに設定しなければならない[MUST]。新しい接続性チェックを作成することは、オリジナルの接続性チェックトランザクションに関連するバインディング要求の再送を待つことなく、できるだけ早く進行中のペアを検証することを可能にする。

* そのペアの状態がWaiting、Frozen、またはFailedの場合、エージェントは、そのペアの新しい接続性チェックを起動するために、チェックリストに関連付けられたトリガーされたチェックリストにそのペアをenqueueしなければならず(まだ存在しない場合)、そのペアの状態をWaitingに設定しなければならない(MUST)。FailedからWaitingへのペアの状態変化は、関連するチェックリストの状態変化も引き起こすかもしれないことに注意してください。

これらのステップは、両エージェントがNATの後ろにいるとき、ICEを迅速に完了させるために行われます。

o ペアがまだチェックリストにない場合。

* ペアは優先順位に基づいてチェックリストに挿入されます。

* 状態は「待機中」となっています。

* ペアはtriggered-check queueにエンキューされる。

トリガーされたチェックが送信されるとき、それはセクション7.2.4で説明されているように構築され処理される。これらの手続きは、エージェントが相手のトランスポートアドレス、ユーザ名断片、 パスワードを知ることを必要とする。リモート候補のユーザー名の断片は、ちょうど受け取ったバインディングリ クエストのUSERNAMEのコロンの後の部分と同じである。このユーザー名の断片を使って、エージェントは相手から受け取った候補をチェックし（フォークの場合は複数あるかもしれません）、このユーザー名の断片を見つけることができます。そして、対応するパスワードが選ばれます。

7.3.1.5.nominatedフラグの更新
被コントロールエージェントは、USE-CANDIDATE属性が設定されたバインディング要求を受け取り、ICEエージェントがその要求を受け入れる場合、7.3.1.4節で計算されたペアの状態に基づいて、次の動作を行う。

o このペアの状態がSucceededである場合、このペアが以前に送ったチェックが成功した応答を生成し、有効なペアを生成したことを意味する(セクション7.2.5.3.2)。エージェントは、有効なペアの指名フラグ値を真に設定する。

o 受け取ったバインディングリクエストが、トリガーされたチェックキューにエンキューされる新しいチェックをトリガーした場合(セクション7.3.1.4)、チェックが送られ、それが成功応答を生成し、有効ペアを生成すると、エージェントはそのペアの指名フラッグを真にセットする。リクエストが失敗した場合(セクション7.2.5.2)、エージェントは有効リストから候補ペアを削除し、候補ペアステートをFailedに設定し、チェックリストステートをFailedに設定しなければならない(MUST)。

被コントロールエージェントがコントロールエージェントからのリクエストを受け入れない 場合、コントロールエージェントは適切なエラーコード応答(例：400)[RFC5389]でノミネー ションリクエストを拒否しなければならない[MUST]。

データストリームのあるコンポーネントに指名フラグが設定されると、そのコンポーネントのICE処理が終了する。セクション8を参照。

7.3.2. Lite実装の追加手順
被コントロールエージェントは、USE-CANDIDATE属性が設定されたバインディングリ クエストを受け取る場合、そしてICEエージェントがそのリクエストを受け入れる場合、 エージェントは、ローカル候補がリクエストを受け取ったトランスポートアドレスを持ち、 リモート候補が受け取ったリクエストのソーストランスポートに等しい候補ペアを 構築する。この候補ペアは、任意の優先度を割り当てられ、関連するチェックリストの有効 リストに入れられる。エージェントはそのペアの指名フラグをtrueに設定する。

データストリームのあるコンポーネントに指名フラグが設定されると、そのコンポーネントのICE処理が終了する。セクション8を参照。

8.ICE処理の終了
ICEエージェントがICEを完了させる方法について説明します。

8.1.フル実装のための手順
ICEの締結には、コントロールエージェントによるペアの指名と、ステートマシンのアップデートが必要です。

8.1.1.ペアの指名
指名に先立ち、制御エージェントは、ある停止基準に達するまで接続性チェックを継続させる。その後、評価基準に基づいて、制御エージェントは、有効リストにある有効なペアの中から、ノミネートのためのペアを選択する。

制御エージェントが指名のために有効なペアを選ぶと、この有効なペアを生成した接続性チェックを(チェックを生成したペアをtriggered-checkキューに入れることによって)、今回はUSE-CANDIDATE属性(セクション7.2.5.3.4)で、繰り返す。被制御エージェントの手続きは、セクション7.3.1.5で説明されている。

最終的に、指名が成功すれば、制御側と被制御側の両方のエージェントが、データストリームの各コンポーネントの有効リストに1つの指名されたペアを持つことになる。ICEエージェントがチェックリストの状態をCompletedに設定すると（データストリームの各コンポーネントに指名されたペアがある場合）、そのペアはそのエージェントの選択ペアとなり、データストリームのそのコンポーネントに対するデータの送受信に使用される。

エージェントがデータストリームの各コンポーネントに対して選択されたペアを生成でき ない場合、エージェントは、たとえばストリームを削除するなど、他のエージェントに 通知するための適切なアクションを取らなければならない[MUST]。正確な動作は、この仕様の範囲外である。

接続性チェックを停止する基準、および推薦するペアを選択する基準は、本仕様の範囲外である。それらは局所的な最適化の問題である。唯一の要件は、エージェントが最終的に1つだけの候補ペアを選び、USE-CANDIDATE属性セットでそのペアに対するチェックを生成しなければならない(MUST)ということである。

制御エージェントは、候補ペアの指名に成功したら(セクション7.2.5.3.4)、ICE セッション内のデータストリームの同じコンポーネントに対して別のペアを指名 してはならない[MUST NOT]。これを実行するには、ICEの再起動が必要である。

本仕様をサポートしない(すなわち、RFC5245に従って実装される)制御エージェントは、 複数の候補ペアを指名する可能性がある。これは、RFC5245では「アグレッシブ・ノミネーション」と呼ばれていた。制御エージェントから複数の候補ペアが指名され、制御エージェントが複数の指名要求を受け付けた場合、エージェントは選択したペアを生成し、最も高い優先度を持つペアを使用しなければならない(MUST)。

本仕様をサポートするエンドポイントによるICEオプション「ice2」（セクション10）の使用は、RFC5245に従って実装される制御エージェントが攻撃的なノミネーションを使用することを防ぐことを想定しています。

注：RFC 5245では、"積極的な指名 "の使用により、ペアが最終的に選択される前 に、ペアのデータ送信を可能にするためにエージェントが継続的にペアを指名 することができた。本仕様では、ノミネーションなしで、常に有効なペアでデータを送信することができる。したがって、積極的な指名はもはや必要ない。

8.1.2.チェックリストとICEの状態を更新する
制御側、被制御側ともに、あるデータストリームの構成要素の候補ペアが指名されると、そのデータストリームに関連するチェックリストの他のペアに影響を与える可能性があります。また、チェックリストの状態にも影響を与えるかもしれない。

o データストリームのコンポーネントの候補ペアが指名され、データストリームに 関連するチェックリストの状態が実行中になると、ICEエージェントは、チェックリスト とトリガー済みチェックキューから同じコンポーネントの候補ペアをすべて削除しなけれ ばならない[MUST]。ペアの状態がIn-Progressである場合、エージェントはIn-Progressトランザクションをキャンセルする。キャンセルは、エージェントが接続性チェックトランザクションに関連するバインディング要求を再送信せず、応答の欠如を失敗として扱わず、応答のためにトランザクションタイムアウトの持続時間を待つことを意味する。

o データストリームの各コンポーネントの候補ペアが指名され、データストリームに関連する チェックリストの状態が「実行中」になると、ICEエージェントはチェックリストの状態を「完了」 に設定する。

o データストリームのコンポーネントの候補ペアが指名されると、エージェントは、 指名されたペアと、データストリームに関連するチェックリストの残りの候補 ペアに対して、まだ受け取るかもしれないすべてのBindingリクエストに応答し続け なければならない[MUST]。セクション7.3.1.4で定義されているように、ペアの状態がSucceededであるとき、エージェントはそのペアに対するBinding要求を受信しても、もはやトリガーチェックを生成しない。

チェックリストセットの各チェックリストの状態がCompletedになると、エージェントはICEセッションの状態をCompletedに設定する。

チェックリストの状態がFailedの場合、ICEはそのチェックリストに関連するデータストリームの処理を正常に完了することができませんでした。正しい動作は、チェックリスト・セット内のチェックリストの状態に依存する。制御エージェントが失敗したチェックリストに関連するデータストリームなしでセッションを継続したい場合、実行中または完了モードのチェックリストが1つ以上残っている場合、エージェントはICE処理を継続させることができる。エージェントは、失敗したデータストリームを削除するために、適切な行動を取らなければならない(MUST)。制御エージェントがセッションの継続を望まず、セッションを終了しなければならない場合、ICE セッションの状態は Failed に設定される。

チェックリストセットの各チェックリストの状態がFailedの場合、ICEセッションの状態はFailedに設定される。制御エージェントは、データストリームなしでセッションを継続したいのでなければ、セッションを終了しなければならない(MUST)。

8.2.Lite 実装のための手順
ICEが終了すると、Lite ICEエージェントは、セクション8.3で説明されているように、ICEによって使用されていないホスト候補を解放することができます。

ピアがフルエージェントの場合、ライトエージェントが候補ペアの指名要求を受け入れると、ライトエージェントはそのペアが指名されたと見なす。データストリームの各コンポーネントに対して指名されたペアが存在すると、そのペアはデータストリームのコンポーネントに対して選択されたペアになる。ライトエージェントが全データストリームの全コンポーネントの選択ペアを生成すると、 ICEセッションの状態がCompletedに設定される。

ピアがライトエージェントの場合、エージェントはローカル候補と、同じデータストリームの、同じコンポーネント、トランスポートプロトコル、IPアドレスファミリーを持つリモート候補をペアリングする。各データストリームの各コンポーネントについて、候補ペアが1つしかない場合、 そのペアが有効リストに追加される。複数のペアが存在する場合、エージェントはRFC6724[RFC6724]の手順に従って ペアを選択し、有効なリストに追加することが推奨される(RECOMMENDED)。

すべてのデータストリームのすべてのコンポーネントに1つのペアがあった場合、 ICE処理の状態は「完了」である。そうでない場合、制御エージェントは、異なる候補ペアを選択する異なるエージェ ントを調整するために、更新された候補リストを送信しなければならない[MUST]。ICE 処理は、更新された候補の交換が完了した後、そしてその後にのみ完了する。

8.3.候補者の解放
8.3.1.完全実施手順
このセクションのルールは、選択された候補にならなかった（すなわち、選択されたペアに関連づけられなかった）候補について、エージェントがチェックの送受信を停止しても安全な場合、および候補を解放する場合について記述しています。

チェックリストがCompleted状態になったら、エージェントはさらに3秒 待つべきである(SHOULD)。その後、選択された候補以外のすべてのローカル候補に ついて、チェックへの応答やトリガーされたチェックの生成を停止することができる。すべてのICEセッションが特定のローカル候補の使用を中止したら(候補は、フォークのシナリオなど、複数のICEセッションによって使用されることがある)、エージェントはその候補を解放することができる。3秒間の遅延は、積極的なノミネーションが使用され、ICEが完了した後に選択されたペアがすぐに変更される場合に対処するためです。

サーバ反射型候補の解放は明示的に行われることはなく、キープアライブの欠如によって行われる。

8.3.2.Lite 導入手順
lite実装では、ICE処理が完了した時点で、選択候補にならなかった候補を解放することができる。

9.ICEリスタート
ICEエージェントは、既存のデータストリームのICEを再開してもよい[MAY]。ICEを再起動すると、エージェントの役割を除く、データストリームの以前の 状態がすべてフラッシュされる。ICE再起動と新規データセッションの唯一の違いは、再起動中に既存の データセッションを使用してデータを送信し続けることができることであり、 新規データセッションは常にロールを決定する必要があることである。

以下のアクションは、ICE再起動を使用することによってのみ達成することができます（エージェントは、これを行うためにICE再起動を使用しなければなりません（MUST））。

o データストリームの送信先を変更する。

o ライトな実装からフルな実装への変更。

o フル実装からライト実装への変更。

ICEを再起動するために、エージェントは、再起動されるデータストリームのパスワードと ユーザー名の断片の両方を変更しなければならない（MUST）。

ICEを再起動したとき、新しいICEセッションの候補セットには、現在のICEセッションで使用された候補の一部、ゼロ、または全部が含まれる可能性があります。

セクション6.1.1に記述されているように、役割を再決定することを要求する特定の基準が満たされない限り、エージェントはICE再開の一部として役割を再決定してはならない[MUST NOT]。

10.ICEオプション
本セクションでは、新しいICEオプションである'ice2'を定義する。ICEエージェントが候補交換に「ice2」を含める場合、ICEオプションは本仕様に 準拠していることを示す。例えば、エージェントはRFC5245で定義されている積極的な指名手順を使用しない。さらに、RFC5245のセクション14で未知のICEオプションを受信するピアに要求されているように、RFC5245に準拠するピアも積極的な指名を使用しないことを保証します。

この仕様に準拠するエージェントは，'ice2'オプションを使用して，準拠について相手に通知しなければならない(MUST)。

注: 「ice2」オプションのエンコーディングと、それを相手に伝えるために 使用されるメッセージは、プロトコル固有のものである。SDP [RFC4566]のエンコーディングは、[ICE-SIP-SDP]で定義されている。

11.キープアライブ
すべてのエンドポイントは、各データセッションに対してキープアライブを送信しなければならない(MUST)。これらのキープアライブは、データセッションのためにNATバインディングを存続させるという目的を果たす。キープアライブは、相手側がサポートする形式を使用して送信されるべきで ある[SHOULD]。ICEエンドポイントは、UDPストリームに対してSTUNベースのキープアライブを許 容する。したがって、ICEエージェントが完全なICE実装で、ICEをサポートする 相手と通信する場合、STUNキープアライブが使用されなければならない[MUST]（lite またはfull）。

エージェントは、データ送信に使用される各候補ペアで、そのペアで過去Tr秒間にパケットが送信されていない場合、キープアライブを送信しなければなりません(MUST)。エージェントはTrの値として15秒を使うべきである(SHOULD)。エージェントはもっと大きな値を使ってもよいが、15秒より小さな値を使うべきではない。

データストリームに対して選択されたペアが生成されると、それらのペアにのみキープアライブが送信されます。

データストリームが削除された場合、エージェントは、データストリームのキープアライ ブの送信を停止しなければならない[MUST]。ICEセッションが終了した場合、エージェントは、すべてのデータストリームのキープアライ ブの送信を停止しなければならない[MUST]。

エージェントは、設定やネットワーク/NATの特性などに基づいて、Trに別の値 を使用してもよい[MAY]。例えば、エージェントが介在するNATのバインディング寿命を検出する 動的な方法を持つ場合、Trを決定するためにその値を使用できる。 より制御されたネットワーク環境でICEを展開する管理者は、その環境で可能 な限り長い期間をTrに設定すべきである(SHOULD)。

STUNがキープアライブに使用される場合、STUNバインディング表示が使用され る[RFC5389]。インジケーションはいかなる認証メカニズムも利用してはならない[MUST NOT]。それはデマルチプレクシングを補助するためにFINGERPRINT属性を含むべきで あるが、他のいかなる属性も含むべきではない[SHOULD NOT]。それはNATバインディングを存続させるためにのみ使用される。バインディングインジケーションは、データ用に使用されているのと同じローカル候補とリ モート候補を使用して送信される。バインディングインジケーショ ンはキープアライブのために使用されるが、エージェントは接続性チェックも受 信できるように準備しなければならない[MUST]。接続性チェックを受信した場合、[RFC5389]で議論されているように応答が生成 されるが、それ以外のICE処理への影響はない。

エージェントは、デフォルトでSTUNキープアライブを使用しなければなら ない[MUST]。個々のICE用法とICE拡張は、用法／拡張固有のキープアライブを指定してもよい(MAY)。

12.データの取り扱い
12.1.データ送信
ICEエージェントは、データストリームの選択されたペアが生成される前に、任意の有効なペアでデータを送信してもよい(MAY)。

いったん選択されたペアがデータストリームのために生成されると、エージェントはそれらのペアにのみデータを送信しなければならない(MUST)。

エージェントは、ローカル候補の基地からリモート候補にデータを送信する。ローカル中継候補の場合、データは[RFC5766]で定義された手順で、（TURNサーバーにある）ベースを経由して転送される。

ローカル候補が中継される候補である場合、エージェントはTURNサーバー上で リモート候補に向けたチャネルを作成することが推奨される(RECOMMENDED)。これは[RFC5766]のセクション11で定義されているチャネル作成の手順を使用して行われる。

データストリームのコンポーネントの選択されたペアは、以下の通りです。

o 空：そのデータストリームのチェックリストの状態が Running であり、ICE 再起動によりそのコンポーネントの以前の選択ペアがない場合。

o データストリームのコンポーネントのチェックリストの状態が走行中であり、ICE再起動によりそのコンポーネントの前の選択されたペアがあった場合、そのペアに等しい。

エージェントが、データストリームに関連する各コンポーネントの選択されたペアを生成でき ない限り、エージェントは、そのデータストリームに関連するいかなるコンポーネントの データ送信も継続してはならない[MUST NOT]。

12.1.1.Lite 実装のための手順
lite実装は、データストリームの各コンポーネントの候補ペアを含む有効なリスト を取得するまで、データを送信してはならない[MUST NOT]。それが起これば、ICEエージェントはデータパケットの送信を開始してもよい[MAY]。そのためには、ペアのリモート候補にデータを送信し(パケットの宛先アドレスと ポートをそのリモート候補に等しく設定する)、データ送信に使用した候補ペアに 関連付けられたベースからデータを送信することになる。中継候補の場合、データはエージェントから送信され、[RFC5766]で定義された手順で、（TURNサーバーにある）ベースを介して転送される。

12.2.データの受信
ICEエージェントは有効な候補ペアのみを使用してデータを送信することが許 されているが(選択ペアが生成されると、選択ペアのみ)、ICE実装はデフォルト で、相手との最新の候補交換で提供されたどの候補でもデータを受信できる ように準備すべきである[SHOULD]。ICEの使用法は、これと異なるルールを定義してもよい。たとえば、データストリームの選択されたペアが生成されるまで、データは送信されないと定義することである。

エージェントが特定のRTP/RTCPデータストリームの新しいソースまたはデスティネーションIPアドレスを持つRTPパケットを受信した場合、エージェントはそのジッターバッファを再調整することが推奨されます（RECOMMENDED）。

RFC3550[RFC3550]のセクション8.2では、同期ソース(SSRC)の衝突とループを検出するアルゴ リズムが記述されている。これらのアルゴリズムは、部分的に、同じSSRCを持つ異なるソーストランスポートアドレスを見ることに基づいている。ただし、ICEを使用する場合、データストリームが候補間で切り替わると、 このような変更が発生することがある。エージェントは、メディアデータ伝送を進めるSTUN交換の結果として、 データストリームが同じ相手からのものであると判断することができる。したがって、送信元トランスポートアドレスに変更があっても、メディア データパケットが同じピアエージェントから来た場合、これをSSRC衝突とし て扱ってはならない[MUST NOT]。

13.拡張性に関する考察
この仕様は、セッション内の両方のICEエージェントが、データのために選択される候補ペアのセットに到達するために調整する方法について、非常に具体的な選択をしています。将来の仕様では、タイマーの微調整のような単純な変更であれ、優先度アルゴリズムの 改訂のような大きな変更であれ、これらのアルゴリズムを変更することが望まれる と予想される。このような変更が行われた場合、セッション内の2つのエージェント間で相互運用性を提供することが重要です。

まず、ICEはICEオプションの概念を提供する。ICEの拡張や変更には、それぞれICEオプションが関連付けられています。エージェントがそのような拡張や変更をサポートする場合、候補交換の一部としてICEオプションを相手エージェントに提供します。

相互運用性を実現する上で複雑な点は、ICEが、合意された候補ペアの集合に収束するために、両方のエージェント上で実行される分散アルゴリズムに依存していることです。2つのエージェントが異なるアルゴリズムを実行する場合、同じ候補ペアに収束することを保証することは困難であろう。セクション8で説明する指名手続きは、選択アルゴリズムを完全に制御エージェントに委ねることによって、緊密な調整の必要性をある程度排除し、ICEは両エージェントが異なるペア優先順位付けアルゴリズムを使用しても、完全に収束させることができる。このような収束の鍵の一つはトリガーチェックであり、推薦されたペアが両エージェントによって検証されることを保証するものである。

ICEは、RTP以外のデータストリームやUDP以外のトランスポートプロトコルに も拡張可能である。非RTPデータストリームのためのICEの拡張は、利用するコンポーネントの数 を指定し、コンポーネントIDを割り当てる必要がある(最も重要なコンポーネントIDは 1から始まる)。新しいトランスポートプロトコルの仕様は、ICE処理の各種ステップがUDPと異な る場合、その方法を定義しなければならない[MUST]。

14.TaとRTOの設定
14.1.一般
ICE収集フェーズ(セクション5.1.1)およびICEが接続性チェックを実行している間 (セクション7)、ICEエージェントはSTUNおよびTURNトランザクションをトリガーす る。これらのトランザクションはTaで示されるレートでペースが決められ、各トランザクションの再送間隔はSTUNトランザクションの再送タイマー（RTO）[RFC5389]に基づいて計算される。

このセクションでは、ICEの収集段階およびICEが接続性チェックを実行している間に、TaおよびRTO値がどのように計算されるかを説明します。

注：以前、RFC 5245では、ICEがリアルタイムデータストリーム（例：RTP）に使用されるか どうかに応じて、TaとRTOを計算するための異なる公式が定義されていた。

以下の式は、エージェントが再送を実行する前に、接続性チェックごとに最初のパケットを送信する動作となります。これは、RTO(再送信間隔を表す)の計算式で見ることができます。これらの式は、実行されるチェックの数であるNに比例します。この結果、ICE はほぼ一定のレートを維持しますが、パケットロスにはより敏感になります。接続性チェックの最初のパケットが失われると、そのペアの検証に長い時間がかかり、その代わりに優先度の低いチェック (ただしパケットロスのないもの) が最初に完了する可能性が高くなります。その結果、ICEは優先順位の高いペアよりも低いペアを選択し、最適ではないパフォーマンスをすることになります。

14.2.タ
ICEエージェントは、デフォルトのTa値である50msを使用すべきであるが、関連データの特性に基づ いて別の値を使用してもよい（MAY）。

エージェントがデフォルト値以外のTa値を使用したい場合、ICEセッションの確立中 に、エージェントは提案された値を相手に示さなければならない[MUST]。両エージェントは、提案された値のうち、より高い値を使用しなければならない[MUST]。エージェントが値を提案しない場合、どちらの値が高いかを比較するとき、そのエ ージェントのデフォルト値が使用される。

各エージェントに選択されたTa値に関係なく、すべてのエージェントからのすべてのトランザク ションの組み合わせは、（特定の実装が複数のエージェントを同時に実行する場合）5 msに1回より頻繁に送信してはならない（すべてのエージェントをペーシングするための1つのグローバルTa値があるかのように）。ICEで5msという値を使用する背景については、付録B.1を参照のこと。

注：付録Cは、異なるTa値を使用した必要帯域幅の例です。

14.3.RTO
ICE収集フェーズの間、ICEエージェントは以下の式を使用してRTO値を計算すべきである（SHOULD）。

     RTO = MAX (500ms, Ta * (Num-Of-Cands))        
Num-Of-Cands：サーバー・リフレックス候補とリレー候補の数

接続性チェックのために、エージェントは次の式を用いてRTO値を計算すべきである。

     RTO = MAX (500ms, Ta * N * (Num-Waiting + Num-In-Progress))        
N：実行する接続性チェックの総数。

Num-Waiting: Waiting 状態に設定されたチェックリストのチェック数。

Num-In-Progress: In-Progress状態にあるチェックリストセットのチェックの数。

待機中や進行中のチェックの数が変わると、トランザクションごとにRTOが異なることに注意してください。

エージェントは上記以外のメカニズムでRTO値を計算してもよい(MAY)。エージェントは 500ms より小さい RTO 値を使用してはならない(MUST NOT)。

15.事例紹介
ここでは、IPv4アドレスを使用するICEとIPv6アドレスを使用するICEの2つの例を示す。

理解を容易にするために、トランスポートアドレスは、ニーモニック名を持つ変数を使用して一覧表示される。名前の形式はentity-type-seqnoである。「entity」は、トランスポートアドレス があるIPアドレスのエンティティを指し、「L」「R」「STUN」「NAT」のいずれ かである。タイプは、パブリックであるトランスポートアドレスの場合は「PUB」、プ ライベートであるトランスポートアドレスの場合は「PRIV」のいずれかである [RFC1918]。最後に

seq-noは、特定のエンティティ上の同じタイプのトランスポートアドレスごとに異なるシーケンス番号である。各変数はIPアドレスとポートを持ち、それぞれvarname.IPとvarname.PORTで示され、varnameは変数名である。

コールフロー自体では、STUNメッセージはいくつかの属性で注釈される。S=」属性は、メッセージの送信元トランスポートアドレスを示す。D=」属性は、メッセージのデスティネーション・トランスポート・アドレスを示す。MA=」属性は、STUNバインディング応答メッセージで使用され、マッピングされたアドレスを参照する。"USE-CAND "属性は、USE-CANDIDATE属性の存在を意味する。

コールフロー例では、STUN認証操作を省略し、2つの完全な実装間の単一のデータストリームに焦点を当てています。

15.1.IPv4アドレスの例
以下の例は、図7に示すトポロジーを使用しています。

                                  + ------- +
                                  |スタン|
                                  |サーバー|
                                  + ------- +
                                      |
                           + --------------------- +
                           | |
                           | インターネット|
                           | |
                           + --------------------- +
                             | |
                             | |
                      + --------- + |
                      | NAT | |
                      + --------- + |
                           | |
                           | |
                        + ----- + + ----- +
                        | L | | R |
                        + ----- + + ----- +
        
図7：トポロジの例

この例では、ICEエージェントLとRは、完全なICE実装です。両エージェントとも1つのIPv4アドレスを持ち、同じSTUNサーバーで構成されている。NATはエンドポイントに依存しないマッピングプロパティとアドレスに依存するフィルタリングプロパティを持っています。ICEエージェント、STUNサーバー、NATのIPアドレスは以下のとおりです。

   エンティティIPアドレスニーモニック名
   --------------------------------------------------
   ICEエージェントL：10.0.1.1 L-PRIV-1
   ICEエージェントR：192.0.2.1 R-PUB-1
   STUNサーバー：192.0.2.2 STUN-PUB-1
   NAT（パブリック）：192.0.2.3 NAT-PUB-1
        
             L NAT STUN R
             | STUN割り当て. | | |
             |（1）STUN Req | | |
             | S = $ L-PRIV-1 | | |
             | D = $ STUN-PUB-1 | | |
             | -------------> | | |
             | |（2）STUN Req | |
             | | S = $ NAT-PUB-1 | |
             | | D = $ STUN-PUB-1 | |
             | | -------------> | |
             | |（3）STUN Res | |
             | | S = $ STUN-PUB-1 | |
             | | D = $ NAT-PUB-1 | |
             | | MA = $ NAT-PUB-1 | |
             | | <------------- | |
             |（4）STUN Res | | |
             | S = $ STUN-PUB-1 | | |
             | D = $ L-PRIV-1 | | |
             | MA = $ NAT-PUB-1 | | |
             | <------------- | | |
             |（5）Lの候補情報| |
             | -------------------------------------------> |
             | | | | 気絶
             | | | | 割り当てます. 
             | | |（6）STUN Req |
             | | | S = $ R-PUB-1 |
             | | | D = $ STUN-PUB-1 |
             | | | <------------- |
             | | |（7）STUN Res |
             | | | S = $ STUN-PUB-1 |
             | | | D = $ R-PUB-1 |
             | | | MA = $ R-PUB-1 |
             | | | -------------> |
        
             |（8）Rの候補情報| |
             | <------------------------------------------- |
             | | （9）バインド要件|開始
             | | S = $ R-PUB-1 |接続性
             | | D = $ L-PRIV-1 |チェック
             | | <------------------- |
             | | ドロップ|
             |（10）バインド要件| | |
             | S = $ L-PRIV-1 | | |
             | D = $ R-PUB-1 | | |
             | -------------> | | |
             | |（11）バインド要件| |
             | | S = $ NAT-PUB-1 | |
             | | D = $ R-PUB-1 | |
             | | ----------------------------> |
             | |（12）バインド解像度| |
             | | S = $ R-PUB-1 | |
             | | D = $ NAT-PUB-1 | |
             | | MA = $ NAT-PUB-1 | |
             | | <---------------------------- |
             |（13）バインド解像度| | |
             | S = $ R-PUB-1 | | |
             | D = $ L-PRIV-1 | | |
             | MA = $ NAT-PUB-1 | | |
             | <------------- | | |
             |データ| | |
             | ===========================================> |
             | | | |
             | |（14）バインド要件| |
             | | S = $ R-PUB-1 | |
             | | D = $ NAT-PUB-1 | |
             | | <---------------------------- |
             |（15）バインド要件|              | |
             | S = $ R-PUB-1 | | |
             | D = $ L-PRIV-1 | | |
             | <------------- | | |
             |（16）バインド解像度| | |
             | S = $ L-PRIV-1 | | |
             | D = $ R-PUB-1 | | |
             | MA = $ R-PUB-1 | | |
             | -------------> | | |
             | |（17）バインド解像度| |
             | | S = $ NAT-PUB-1 | |
             | | D = $ R-PUB-1 | |
             | | MA = $ R-PUB-1 | |
             | | ----------------------------> |
             |データ| | |
             | <=========================================== |
        
             | | | |
                                ...... 
             | | | |
             |（18）バインド要件| | |
             | S = $ L-PRIV-1 | | |
             | D = $ R-PUB-1 | | |
             | USE-CAND | | |
             | -------------> | | |
             | |（19）バインド要件| |
             | | S = $ NAT-PUB-1 | |
             | | D = $ R-PUB-1 | |
             | | USE-CAND | |
             | | ----------------------------> |
             | |（20）バインド解像度| |
             | | S = $ R-PUB-1 | |
             | | D = $ NAT-PUB-1 | |
             | | MA = $ NAT-PUB-1 | |
             | | <---------------------------- |
             |（21）バインド解像度| | |
             | S = $ R-PUB-1 | | |
             | D = $ L-PRIV-1 | | |
             | MA = $ NAT-PUB-1 | | |
             | <------------- | | |
             | | | |
        
図8：フローの例

メッセージ1～4エージェントLは、自分のローカルIPアドレスからホスト候補を集め、そこからSTUNサーバーにSTUNバインディング要求を送信する。このリクエストはNATバインディングを作成する。バインディングのNATパブリックIPアドレスは、エージェントLのサーバーリフレックス候補になる。

メッセージ 5．エージェントLは、ICEの使用に関連したシグナリングプロトコルを使用して、エージェントRにローカル候補情報を送信します。

メッセージ6-7: エージェントRは自分のローカルIPアドレスからホスト候補を集め、そこからSTUNサーバーにSTUNバインディングリクエストを送信する。エージェントRはNATの後ろではないので、Rのサーバー反射候補はホスト候補と同じになる。

メッセージ8エージェントRは、ICEの使用に関連したシグナリングプロトコルを使用して、エージェントLにローカル候補情報を送信します。

両エージェントはICEを完全に実装しているため、開始エージェント（エージェントL）が制御エージェントになります。

エージェントLとRは共に候補者をペアリングする。両エージェントとも最初は2組のペアを持っている。しかし、エージェントLは、サーバー反射の候補を含むペアを刈り込み、結果的に1つ(L1)になります。エージェントLでは、このペアはローカル候補$L_PRIV_1とリモート候補$R_PUB_1を持っています。エージェントRでは、2つのペアが存在する。最優先のペア(R1)は、ローカル候補が$R_PUB_1、リモート候補が$L_PRIV_1、2番目のペア(R2)は、ローカル候補が$R_PUB_1、リモート候補が$NAT_PUB_1である。ペアを以下に示す(ペア番号は参考のため)。

                            ペア ENTITY ローカル リモート ペア # 有効 ------------------------------------------------------------------------------ ICE Agent L: L_PRIV_1 R_PUB_1 L1  
ICEエージェントR：R_PUB_1 L_PRIV_1 R1 R_PUB_1 NAT_PUB_1 R2

メッセージ9エージェントRは、ペア#2の接続性チェックを開始する。ペアのリモート候補はエージェントLのプライベートアドレスなので、RからLへリクエストをルーティングできないため、チェックは成功せず、ネットワークによって落とされる。

メッセージ 10-13エージェント L がペア L1 の接続性チェックを開始した。チェックは成功し、Lは新しいペア(L2)を作成する。新しいペアのローカル候補は$NAT_PUB_1であり、リモート候補は$R_PUB_1である。エージェントLは、希望すれば、このペア(L2)でデータを送受信できるようになります。

                            ペア ENTITY ローカル リモート ペア # 有効 ------------------------------------------------------------------------------ ICE Agent L: L_PRIV_1 R_PUB_1 L1 NAT_PUB_1 R_PUB_1 L2 X 
ICEエージェントR：R_PUB_1 L_PRIV_1 R1 R_PUB_1 NAT_PUB_1 R2

メッセージ14-17エージェントRがエージェントLからバインディング要求(メッセージ11)を受け取ると、トリガーとなる接続性チェックを開始する。このペアは、エージェントRの既存のペアの一つ(R2)と一致する。このチェックは成功し、ペア(R2)はエージェントRの有効リストに追加される。エージェントRは、希望すればペア(R2)でデータを送受信できるようになった。

                            ペア ENTITY ローカル リモート ペア # 有効 ------------------------------------------------------------------------------ ICE Agent L: L_PRIV_1 R_PUB_1 L1 NAT_PUB_1 R_PUB_1 L2 X 
ICEエージェントR：R_PUB_1 L_PRIV_1 R1 R_PUB_1 NAT_PUB_1 R2 X

メッセージ 18-21ある時点で、制御エージェント(エージェントL)は、有効リスト内のペア(L2)を指名することを決定する。ペア(L2)の接続性チェックを行い、バインディング要求にUSE-CANDIDATE属性を含める。チェックが成功すると、エージェントLはペア(L2)の指名フラグ値を「true」に設定し、エージェントRはマッチするペア(R2)の指名フラグ値を「true」に設定する。このストリームに関連するコンポーネントはもう存在しないので、指名されたペアは選択されたペアになる。その結果，このストリームの処理は，Completed 状態に移行する．ICE処理もCompletedに遷移する．

15.2.IPv6アドレスの例
以下の例では、図9に示すトポロジーを使用しています。

                                + ------- +
                                |スタン|
                                |サーバー|
                                + ------- +
                                    |
                         + --------------------- +
                         | |
                         | インターネット|
                         | |
                         + --------------------- +
                            | |
                            | |
                            | |
                            | |
                            | |
                            | |
                            | |
                         + ----- + + ----- +
                         | L | | R |
                         + ----- + + ----- +
        
図9：トポロジの例

この例では、ICEエージェントLとRは、完全なICE実装です。両エージェントとも1つのIPv6アドレスを持っており、同じSTUNサーバーで構成されています。ICEエージェントとSTUNサーバーのIPアドレスは、以下のとおりです。

   ENTITYIPアドレスニーモニック名
   --------------------------------------------------
   ICEエージェントL：2001：db8 :: 3 L-PUB-1
   ICEエージェントR：2001：db8 :: 5 R-PUB-1
   STUNサーバー：2001：db8 :: 9 STUN-PUB-1
        
             LスタンR
             | STUN割り当て. | |
             |（1）STUN Req | |
             | S = $ L-PUB-1 | |
             | D = $ STUN-PUB-1 | |
             | ----------------------------> | |
             |（2）STUN Res | |
             | S = $ STUN-PUB-1 | |
             | D = $ L-PUB-1 | |
             | MA = $ L-PUB-1 | |
             | <---------------------------- | |
             |（3）Lの候補情報| |
             | -------------------------------------------> |
             | | | 気絶
             | | | 割り当てます. 
             | |（4）STUN Req |
             | | S = $ R-PUB-1 |
             | | D = $ STUN-PUB-1 |
             | | <------------- |
             | |（5）STUN Res |
             | | S = $ STUN-PUB-1 |
             | | D = $ R-PUB-1 |
             | | MA = $ R-PUB-1 |
             | | -------------> |
             |（6）Rの候補情報| |
             | <------------------------------------------- |
             |（7）バインド要件| |
             | S = $ L-PUB-1 | |
             | D = $ R-PUB-1 | |
             | -------------------------------------------> |
             |（8）バインド解像度| |
             | S = $ R-PUB-1 | |
             | D = $ L-PUB-1 | |
             | MA = $ L-PUB-1 | |
             | <------------------------------------------- |
        
             |データ| |
             | ===========================================> |
             | | |
             |（9）バインド要件| |
             | S = $ R-PUB-1 | |
             | D = $ L-PUB-1 | |
             | <------------------------------------------- |
             |（10）バインド解像度| |
             | S = $ L-PUB-1 | |
             | D = $ R-PUB-1 | |
             | MA = $ R-PUB-1 | |
             | -------------------------------------------> |
             |データ| |
             | <=========================================== |
             | | |
                                ...... 
             | | |
             |（11）バインド要件| |
             | S = $ L-PUB-1 | |
             | D = $ R-PUB-1 | |
             | USE-CAND | |
             | -------------------------------------------> |
             |（12）バインド解像度| |
             | S = $ R-PUB-1 | |
             | D = $ L-PUB-1 | |
             | MA = $ L-PUB-1 | |
             | <------------------------------------------- |
             | | | |
        
図10：フローの例

メッセージ1-2エージェントLは、自分のローカルIPアドレスからホスト候補を集め、そこからSTUNサーバーにSTUNバインディング要求を送信する。エージェントLはNATの後ろにいないため、Lのサーバー反射候補はホスト候補と同じになる。

メッセージ3：エージェントLは、ICEの使用法に関連したシグナリングプロトコルを用いて、エージェントRにローカル候補情報を送信する。

メッセージ4-5: エージェントRは自分のローカルIPアドレスからホスト候補を集め、そこからSTUNサーバーにSTUNバインディングリクエストを送信する。エージェントRはNATの後ろではないので、Rのサーバー反射候補はホスト候補と同じになる。

メッセージ 6．エージェントRは、ICEの使用に関連したシグナリングプロトコルを使用して、エージェントLにローカル候補情報を送信します。

両エージェントはICEを完全に実装しているため、開始エージェント（エージェントL）が制御エージェントになります。

エージェントLとRは共に候補者をペアリングする。両エージェントとも最初は1組ずつ持っている。エージェントLでは、ペア(L1)はローカル候補$L_PUB_1とリモート候補$R_PUB_1を持っている。エージェントRでは、ペア(R1)はローカル候補$R_PUB_1とリモート候補$L_PUB_1を持っている。ペアを以下に示す(ペア番号は参考のため)。

                            ペア ENTITY ローカル リモート ペア # 有効 ------------------------------------------------------------------------------ ICE Agent L: L_PUB_1 R_PUB_1 L1  
ICEエージェントR：R_PUB_1 L_PUB_1 R1

メッセージ 7-8: エージェント L はペア L1 の接続性チェックを開始する。エージェントLは、希望すればペアL1上でデータの送受信ができるようになります。

                            ペア ENTITY ローカル リモート ペア # 有効 ------------------------------------------------------------------------------ ICE Agent L: L_PUB_1 R_PUB_1 L1 X 
ICEエージェントR：R_PUB_1 L_PUB_1 R1

メッセージ9-10エージェントRがエージェントLからバインディング要求(メッセージ7)を受信すると、トリガーによる接続性チェックを開始します。このペアはエージェントRの既存のペア(R1)と一致する。エージェントRが望めば、ペア(R1)上でデータの送受信ができるようになります。

                            ペア ENTITY ローカル リモート ペア # 有効 ------------------------------------------------------------------------------ ICE Agent L: L_PUB_1 R_PUB_1 L1 X 
ICEエージェントR：R_PUB_1 L_PUB_1 R1 X

メッセージ11～12ある時点で、制御エージェント(エージェントL)は、有効リスト内のペア(L1)を指名することを決定する。ペア(L1)の接続性チェックを行い、バインド要求にUSE-CANDIDATE属性を含める。チェックが成功すると、エージェントLはペア(L1)の指名フラグ値を「true」に設定し、エージェントRは一致するペア(R1)の指名フラグ値を「true」に設定する。

このストリームに関連するコンポーネントがなくなったため、指名されたペアは選択されたペアとなる。その結果、このストリームの処理は完了状態に移行する。ICE の処理も Completed 状態に遷移する．

16.STUNエクステンション
16.1.属性
本仕様では、4つのSTUN属性を定義する。PRIORITY、USE-CANDIDATE、ICE-CONTROLLED、ICE-CONTROLLING の4つの STUN 属性を定義する。

PRIORITY属性は、この検査で発見される場合、ピアリフレクティブ候補に関連付けられる優先度を示す。32ビットの符号なし整数で、属性値は0x0024です。

USE-CANDIDATE属性は、このチェックの結果得られた候補ペアがデータ送信に使用されることを示します。この属性は内容を持たず（属性の長さフィールドは0）、フラグとして機能する。属性値は 0x0025 である。

ICE-CONTROLLED属性は、Bindingリクエストの中に存在する。この属性は，クライアントが現在，制御された役割にあると信じていることを示す。属性の内容は，ネットワークバイトオーダーの64ビット符号なし整数であり，乱数を含む。この数値は、"tiebreaker value "と呼ばれるときに、ロールの競合を解決するために使用される。ICEエージェントは、487応答を受け取らない限り、ICEセッション内のすべ てのストリームに対するすべてのバインディングリクエストに同じ番号を使用しな ければならない[MUST](その場合、番号を変更しなければならない)(セクション 7.2.5.1参照)。エージェントは、ICE再起動が発生したときに番号を変更してもよい[MAY]。

ICE-CONTROLLING属性は、Bindingリクエストに存在する。この属性は，クライアントが現在，制御する役割にあると信じていることを示す。属性の内容は、ネットワークバイトオーダーの64ビット符号なし整数であり、乱数を含みます。ICE-CONTROLLED属性と同様に、この数値は役割の競合を解決するために使用される。エージェントは、487応答を受け取らない限り、ICEセッション内のすべてのスト リームに対するすべてのバインディングリクエストに同じ番号を使用しなければ ならない[MUST](その場合、番号を変更しなければならない)(セクション7.2.5.1参照)。エージェントは、ICE再起動が発生したときに番号を変更してもよい[MAY]。

16.2.新しいエラー・レスポンス・コード
本仕様では、単一のエラー応答コードを定義する。

487 (役割の衝突):バインド要求はICE-CONTROLLINGまたはICE-CONTROLLED属性のいずれかを含み、サーバーと競合するICEロールを示していました。リモートサーバーはクライアントとサーバーのタイブレーク値を比較し、クライアントはロールを切り替える必要があると判断しました。

17.運用上の留意点
このセクションでは、ICEがエンドポイントで使用されるネットワークを運用する事業者に関連する問題について説明する。

17.1.NATとファイアウォールの種類
ICE は、既存の NAT およびファイアウォール機器と連携して動作するように設計されています。そのため、ICE を導入するために、既存のファイアウォールや NAT の機器を交換したり、再設定したりする必要はありません。実際、ICEは、VoIP事業者がファイアウォールやNATを含むIPネットワークインフラを制御できない環境で展開するために開発されたものです。

つまり、ICEは、NATデバイスが[RFC4787]と[RFC5382]で定義されている推奨事項を満たす「behave」準拠の環境で最も効果的に機能します。behaveに準拠したNATを持つネットワークでは、ICEはTURNサーバーを必要とせずに動作するため、音声品質の向上、通話設定時間の短縮、ネットワーク事業者への帯域幅需要の低減が可能になります。

17.2.帯域幅の要件
ICEの導入は、事業者が考慮しなければならない利用可能なネットワーク容量といくつかの相互作用があります。

17.2.1.STUNおよびTURNサーバー-容量計画
ICEは、まず第一に、通常データセンターに設置されるTURNサーバーとSTUNサーバーを利用する。STUNサーバーは、比較的少ない帯域幅しか必要としません。各データストリームの各コンポーネントについて、各クライアントからSTUNサーバーに1つまたは複数のSTUNトランザクションがあります。基本的な音声のみのIPv4 VoIPの配備では、呼ごとに4つのトランザクションがある (発信側と着信側の両方について、RTPとRTCPに1つずつ)。各トランザクションは、1つのリクエストと1つの応答で、前者は20バイト長、後者は 28バイト長である。

したがって，あるシステムにN人のユーザーがいて，それぞれが忙しい時間帯に4回電話をかけるとすると，N*1.7bpsが必要になります．100万人のユーザーであれば1.7Mbpsとなり、非常に小さな数字です（相対的な話）。

TURNトラフィックはより充実しています。TURNサーバーは、実際のデータのトラフィックに加えて、STUNのトラフィック量と同等のトラフィック量を見ることになる（実際、TURNサーバーが配備されていれば、別のSTUNサーバーは不要である）。データ中継のためにTURNを必要とするコールの量は、ネットワークトポロジーに大きく依存し、時間の経過とともに変化する可能性があります。ビヘイビアに100％準拠したNATを持つネットワークでは、それはまさにゼロです。

上記の計画上の考慮点は、マルチメディアシナリオ（例：音声およびビデオ会議）およびセッションの参加者数が増加した場合に、より重要になります。

17.2.2.ギャザリングと接続性チェック
候補を集め、接続性チェックを行うプロセスは、帯域幅を消費する可能性があります。ICEは、この2つのプロセスのペースを上げるように設計されています。候補の収集と接続性チェックのフェーズでは、ICEのプロセスが終了した時点で消費されるデータトラフィックとほぼ同じ帯域幅でトラフィックを生成するようになっています。これは、ネットワークが特定のタイプの通信トラフィック（音声、ビデオ、テキストなど）に対応するように設計されている場合、そのデータのICEチェックをサポートするのに十分な容量を確保できるようにするためです。ICEが終了すると、その後のICEキープアライブによって総帯域幅使用量がわずかに増加しますが、これは通常、非常に小さな増加です。

ペーシングを利用しなかった環境では、ギャザリングとチェックのフェーズによる輻輳が問題になっていました。一般に、エンドポイントが送信するのと同じ速さでチェックがネットワークに殺到するため、アクセスリンクが輻輳しました。したがって、ネットワークオペレーターは、ICEの実装がペーシング機能をサポートしていることを確認する必要があります。このペーシング機能により、コールセットアップ時間は増加しますが、ICEのネットワークへの親和性が高まり、導入が容易になります。

17.2.3.キープアライブ
STUN キープアライブ（STUN バインディングインジケーションの形式）は、データセッションの途中で送信されます。ただし、実際のデータトラフィックがない場合にのみ送信されます。連続メディアを使用し、音声アクティビティ検出（VAD）を使用しない環境、または VAD が短い間隔（最大 1 秒）の快適なノイズとともに使用される環境では、キープアライブは使用されず、帯域幅の使用量も増加しませ ん。VADが快適なノイズなしで使用されている場合、無音時間帯にキープアライブが送信されます。これは、音声があるときに送信される20～30ミリ秒ごとのパケットよりはるかに少ない、15～20秒ごとの1パケットになります。したがって、キープアライブはキャパシティプランニングに実質的な影響を与えません。

17.3.ICEとICE-Lite
ICEとICE-liteを混在させた展開でも相互運用が可能です。そのように明示的に設計されています。

しかし、ICE-liteは限られたユースケースにしか展開できない。これらのケースとその際の注意点については、付録Aに記載されている。

17.4.トラブルシューティングとパフォーマンス管理
ICEは、エンドツーエンドの接続チェックを利用し、処理の多くをエンドポイントに配置します。このため、ネットワーク事業者は、ICEの導入をどのようにトラブルシュートすればよいのか、ICEのパフォーマンスをどのように把握すればよいのか、といった課題を抱えています。ICEがどのように機能しているのか、どうやって知ることができるのでしょうか？

ICE には、これらの問題に対処するための機能が組み込まれています。通常、ネットワーク事業者のデータセンターに配置されるシグナリングサーバーは、ICEパラメータを伝える候補交換の内容を見ることになります。これらのパラメータには、各候補のタイプ（ホスト、サーバー反射、リレー）と、関連するアドレスが含まれています。ICE処理が完了すると、選択されたアドレス（およびそのタイプ）をシグナリングする、更新された候補の交換が行われます。この更新されたシグナリングは、ネットワーク機器（シグナリングに接続された診断ツールなど）にICE処理の結果を知らせる目的で正確に実行されます。

その結果、ネットワークオペレーターは、シグナリングサーバーが生成するログを通じて、各コールでどのような種類の候補が使用されているか、どのアドレスがICEによって選択されたかを観察することができます。これは、ICEがどのように機能しているかを評価するのに役立つ主要な情報です。

17.5.エンドポイント設定
ICEは、エンドポイントに設定されたいくつかのデータに依存しています。この設定データには、タイマー、TURNサーバーの認証情報、STUNとTURNサーバーのホスト名などが含まれます。ICE自身は、この設定のためのメカニズムを提供していない。代わりに、この情報は、エンドポイント内の他のすべてのパラメータを設定するために使用されるメカニズムに添付されることが想定されます。SIPフォンの場合、コンフィギュレーションフレームワーク[RFC6080]などの標準的な解決策が 定義されている。

18.IABの検討事項
IABは「一方的な自己アドレス修正」(UNSAF)の問題を研究した。これは、ICEエージェント が、協調的なプロトコル反射メカニズムによって、NATの反対側にある別の領域でその アドレスを決定しようと試みる一般的なプロセスである[RFC3424]。ICEは、この種の機能を実行するプロトコルの一例です。興味深いことに、ICEのプロセスは片務的ではなく、双務的であり、この違いはIABが提起した問題に大きな影響を与える。実際、ICEはUNSAFプロトコルではなく、B-SAF（Bilateral Self-Address Fixing）プロトコルと見なすことができる。いずれにせよ、IABは、この目的のために開発されたプロトコルは、特定の検討事項を文書化することを義務付けています。このセクションは、それらの要件を満たしています。

18.1.問題の定義
RFC3424より、UNSAFの提案はすべて提供する必要がある。

UNSAF の提案で解決しようとする具体的かつ限定的な範囲の問題を正確に定義すること。短期的な解決策を他の問題の解決に一般化すべきではない。そのような一般化は、短期的な解決策とされるものに長期的に依存し、それを使用することにつながる--つまり、それを「短期的」と呼ぶのはもはや正確ではないのだ。

ICEが解決しようとしている具体的な問題は、以下の通りです。

2つのピアに、通信に使用できるトランスポートアドレスのセットを決定する手段を提供すること。

エージェントが、通信を希望する他のピアから到達可能なアドレスを決定する手段を提供すること。

18.2.出口戦略
RFC3424より、UNSAFの提案はすべて提供する必要がある。

出口戦略/移行計画の記述。短期的な対策としては、適切な技術が導入されれば、自然と使用頻度が減っていくものが良い。

ICE自体は簡単に廃止されることはない。しかし、グローバルに接続されたインターネットでも、ルーターの故障で一時的に接続が途絶えていないかを検出する手段などとして有用です。また、ICEは、NATとは無関係な特定のセキュリティ攻撃を防止するのにも役立ちます。しかし、ICEが行うのは、他のUNSAFメカニズムの段階的な廃止を支援することである。ICEは、これらのメカニズムの中から、より良いものを優先し、より悪いものを非優先とすることで、効果的に選択します。IPv6の導入に伴いNATが消滅し始めると、サーバー反射型および中継型候補 （どちらもUNSAFアドレスの形式）は、ネイティブホスト候補へのより高い優先順位 の接続性が存在するため、使用されなくなるだけです。したがって、サーバーの使用は次第に少なくなり、最終的に使用量がゼロになった時点で削除することができる。

実際、ICEはIPv4からIPv6への移行を支援することができる。2つのデュアルスタックホストがSIPで通信するときに、IPv6とIPv4のどちらを使用す るかを決定するために使用できる(IPv6が使用される)。また、6to4とネイティブv6の両方の接続性を持つネットワークが、相手と通信するときにどちらのアドレスを使用するかを決定することができます。

18.3.ICEで導入された脆さ
RFC3424より、UNSAFの提案はすべて提供する必要がある。

システムをより "もろい "ものにする可能性のある具体的な問題についての議論。例えば、複数のネットワーク層でデータを利用するアプローチでは、依存関係が増え、デバッグの課題が増加し、移行が困難になります。

ICEは、実際に既存のUNSAFメカニズムから脆さを取り除く。特に、古典的なSTUN(RFC 3489 [RFC3489]に記載)には、いくつかの脆弱性がある。そのうちの1つは、ICEエージェントが背後にあるNATのタイプを分類しようとする ことを要求する発見プロセスである。このプロセスは、エラーが発生しやすい。ICEでは、この発見プロセスは単純に使用されない。アドレスの有効性を一方的に評価するのではなく、ピアへの接続性を測定することによって、その有効性が動的に決定されます。接続性を決定するプロセスは、非常に堅牢です。

古典的なSTUNやその他のユニラテラルメカニズムのもろさのもうひとつのポイントは、 追加のサーバーに絶対的に依存していることである。ICEは、ユニラテラルアドレスを割り当てるためにサーバーを使用しますが、可能であれば、エージェントは直接接続することができます。したがって、ICEを使用する場合、STUNサーバーに障害が発生しても、通話を進行させることができる場合がある。

古典的なSTUNのもう一つの脆弱性のポイントは、STUNサーバーが公衆インターネット上にあることを仮定していることです。興味深いことに、ICEではその必要はありません。様々なアドレス領域で多数のSTUNサーバーが存在する可能性があります。ICEは、使用可能なアドレスを提供したサーバーを発見します。

古典的なSTUNのもろさの最も困った点は、すべてのネットワークトポロジで動作しないことです。各エージェントとSTUNサーバーの間に共有NATがある場合、従来のSTUNは動作しないことがあります。ICEを使えば、その制約がなくなります。

Classic STUNはまた、いくつかのセキュリティの考慮事項を導入している。幸いなことに、これらのセキュリティ上の考慮事項は、ICEによって軽減されます。

そのため、ICEは古典的なSTUNで発生した脆さを修復する役割を果たし、システムに新たな脆さを持ち込むことはない。

これらの改良のペナルティとして、ICEはセッション確立時間を増加させる。

18.4.長期的な解決策に必要な条件
RFC3424より、UNSAFのプロポーザルは以下のものを提供する必要があります。

長期的かつ健全な技術的ソリューションの要件を特定し、適切な長期的ソリューションを見出すプロセスに貢献する。

RFC3489からの私たちの結論は変わっていません。しかし、ICEは長期的な解決策の一部になり得ると考えているため、実際に役立っていると感じています。

18.5.既存のNAPTボックスの問題点
RFC3424より、UNSAFの提案はすべて提供する必要がある。

既存のNA[P]Tsと経験報告で指摘された実用的な問題点の影響についての議論。

現在、多くのNATボックスが、「汎用」ALG機能を提供しようと市場に展開されている。これらの汎用ALGは、パケット内のテキストまたはバイナリ形式でIPアドレスを探し、それらがバインディングに一致する場合、それらを書き換えます。これは、古典的なSTUNと干渉する。しかし、STUN [RFC5389]へのアップデートは、汎用ALGからこれらのバイナリアドレスを隠すエンコーディングを使用している。

既存のNAPTボックスは、UDPベースのバインディングに対して非決定的で、一般的に短い有効期限を持つ。このため、実装はバインディングを維持するために、定期的にキープアライブを送信する必要がある。ICEは、デフォルトで15秒を使用しているが、これは非常に保守的な見積もりである。最終的には、NATボックスが[RFC4787]に準拠するようになると、この最小キープアライブは 決定論的なものになる。

ICEタイマーを調整することができます。最小キープアライブ間隔を発見し、制御する方法を持つことは、さらに良いことでしょう。

19.セキュリティに関する考慮事項
19.1.IPアドレスのプライバシー
候補を探す過程では、クライアントとそのピアのソースアドレスがネットワーク上のリスナーである攻撃者に公開され、候補を交換する過程では、ネゴシエーションを見ることができる攻撃者にアドレスが公開される。VPN ユーザーのローカルインターフェイスから収集されたサーバー反射アドレスのような一部のアドレスは、機密情報である可能性がある。これらの潜在的な攻撃を軽減できない場合、ICE の使用法は、どのアドレスがネゴシエーションやプロービングプロセスに公開されるかを制御するメカニズムを定義することができる。個々の実装は、どのアドレスが公開されるかを制御するための実装固有のルールを持つこともできる。たとえば、[WebRTC-IP-HANDLING]は、WebRTCアプリケーションのICEを介したIPアドレスの公開のプライバシー面に関する追加情報を提供しています。このような問題が発生する可能性があるICEの実装では、候補を生成するためにどの ネットワークインターフェースを使用するかを制御するプログラムまたはユーザー インターフェースを提供することが推奨されます(RECOMMENDED)。

ピアから提供された候補の種類と、それらの候補に対して実行された接続性テストの結果に基づいて、ピアは、ローカルネットワークの特性、例えば、異なるタイミングがピアに明らかである場合を決定することができるかもしれない。制限の範囲内で、ピアがローカルネットワークを調査することができるかもしれません。

ICEシステムでは、いくつかの種類の攻撃が可能である。以下では、これらの攻撃とその対策について考察する。

19.2.接続性チェックへの攻撃
攻撃者はSTUNの接続性チェックを妨害しようとするかもしれません。最終的に、これらの攻撃はすべてICEエージェントを騙して、接続性チェックの結果について不正確なことを考えさせます。攻撃の種類に応じて、攻撃者は異なる能力を持つ必要があります。あるケースでは、攻撃者は接続性チェックの経路上にいる必要があります。また、STUN接続性チェックを生成することができれば、攻撃者が経路上にいる必要はないケースもあります。接続性チェックに対する攻撃は通常、ネットワークエンティティによって実行されるが、攻撃者がエンドポイントを制御できる場合、接続性チェック攻撃を引き起こすことができる可能性がある。攻撃者が試みて引き起こす可能性のある誤った結論は以下の通りである。偽の無効。攻撃者は、候補ペアが無効であるにもかかわらず、無効であると考えるようにエージェントのペアを欺くことができます。これは、エージェントに別の候補(攻撃者が注入したものなど)を選ばせたり、 すべての候補を失敗させることで通話を中断させるために使用されることがある。

False Valid (偽の有効)。攻撃者はペアのエージェントを騙して、候補ペアが有効であるかのように思わせることができる。これにより、エージェントはセッションを進めることができますが、その後、データを受信することができません。

False Peer-Reflexive Candidate: 攻撃者は、エージェントが予期していないときに、新しいピアリフレクティブ候補を発見するように仕向けることができます。これは、盗聴や他の目的のために、データストリームをDoSターゲットまたは攻撃者にリダイレクトするために使用することができます。

False Valid on False Candidate: 攻撃者は、実際にはそのエージェントにルートしていない アドレスの候補が存在すると、すでにエージェントに信じ込ませている (たとえば、偽ピア反射型候補や偽サーバ反射型候補を注入することにより)。その後、攻撃者はこの候補が有効であるとエージェントに信じ込ませる攻撃を開始する。

攻撃者が偽のpeer-reflexive候補や偽の候補で偽の有効を引き起こすことができれば、 [RFC5389]で説明されている攻撃のいずれかを起動することができます。

偽の無効な結果を強制するために、攻撃者はいずれかのエージェントからの接続性チェックが送信されるのを待つ必要があります。それが送信されると、攻撃者は、回復不可能なエラー応答(例えば 400)を持つ偽の応答を注入するか、応答がエージェントに決して到達しない ように応答を削除する必要がある。しかし、候補は実際には有効なので、オリジナルのリクエストはピアエージェ ントに到達し、成功応答になる可能性がある。攻撃者は、DoS攻撃、レイヤー2ネットワークの妨害、または他の技術に よって、このパケットまたはその応答を強制的にドロップさせる必要がある。そうしないと、成功レスポンスが発信元にも届き、攻撃の可能性があることを警告することになります。攻撃者が偽のレスポンスを生成する能力は、STUN 短期クレデンシャル機構によって軽減される。この応答を処理するために、攻撃者はパスワードが必要である。候補交換信号が保護されている場合、攻撃者はパスワードを持たず、その応答は破棄される。

偽装されたICMP Hard Errors (Type 3, code 2-4)も、偽の無効な結果を作り出すために使用されることがある。ICEエージェントがこれらのICMPエラーに対する応答を実装している場合、攻撃者は接続性チェックを送信するエージェントに配信されるICMPメッセージを生成することが可能です。エージェントによる ICMP エラーメッセージの検証は、唯一の防御方法である。Type 3 code=4 の場合、接続性チェックが DF=0 で送信されない限り、外側の IP ヘッダは検証されない。 ホストが発信する Code 2 または 3 の場合、アドレスはリモートエージェントのホスト、リフレクティブ、リレーの候補 IP アドレスのいずれかになると予想される。ICMPメッセージは、エラーを引き起こしたメッセージのIPヘッダーとUDPヘッダーを含みます。これらのフィールドも検証される必要がある。IP宛先とUDP宛先ポートは、ターゲットとなる候補のアドレスとポート、または候補のベースアドレスのいずれかに一致する必要があります。送信元IPアドレスとポートは、接続性チェックを送信するエージェントの同じベースアドレスの任意の候補とすることができます。したがって、候補者の交換にアクセスできる攻撃者であれば、必要な情報を入手することができる。したがって、検証は弱い防御であり、送信元アドレス検証を行わないネットワーク内のノードから、オフパスの攻撃者がなりすましたICMP攻撃を送信することも可能である。

偽の有効な結果を強制することも同様に機能する。攻撃者は、各エージェントからのバインディング要求を待ち、偽の成功応答を注入する必要がある。ここでも、STUNの短期クレデンシャル機構により、攻撃者が有効な成功レスポンスを注入するために、攻撃者はパスワードが必要である。あるいは、攻撃者は、通常はネットワークによってドロップされるか拒否される有効な成功応答を、（例えばトンネリング機構を使って）エージェントにルーティングすることができる。

偽のpeer-reflexive候補の結果を強制するには、偽のリクエストまたは応答、 あるいはリプレイのいずれかを使用することができる。まず、偽のリクエストと応答のケースを考える。これは、攻撃者があるエージェントに、偽の候補のソースIPアドレスとポートを持つバインドリクエストを送ることを必要とする。さらに、攻撃者は他のエージェントからのBindingリクエストを待ち、偽の候補を含むXOR-MAPPED-ADDRESS属性で偽の応答を生成する必要がある。ここで説明した他の攻撃と同様に、この攻撃はSTUNメッセージの完全性メカニズムおよび安全な候補の交換によって軽減される。

パケットリプレイで偽のpeer-reflexive候補の結果を強制するのは、これとは異なる。攻撃者は、エージェントの1つがチェックを送信するまで待つ。それはこのリクエストを傍受し、 偽のソースIPアドレスで他のエージェントに向けてそれをリプレイする。また、パケットをドロップさせるためにDoS攻撃を開始するか、レイヤ2メカニ ズムを使って強制的にドロップさせることで、オリジナルリクエストがリモー トエージェントに到達するのを防ぐ必要がある。再生されたパケットは、他のエージェントで受信され、完全性チェックが通 るので受け入れられる(完全性チェックはソースIPアドレスとポートをカバーするこ とはできないし、しない)。その後、それは応答される。この応答は、偽の候補とのXOR-MAPPED-ADDRESSを含み、その偽の候補に送信される。攻撃者はそれを受信し、発信元に向けて中継する必要がある。

他のエージェントは、その偽の候補者に対して接続性チェックを開始します。この検証は成功する必要がある。このため、攻撃者は偽の候補に対して偽の有効性を強制する必要がある。この目標を達成するための偽のリクエストや応答の注入は、STUNと候補者交 換の完全性メカニズムによって防がれる。したがって、この攻撃はリプレイを通してのみ実行できる。これを行うには、攻撃者はこの偽の候補に向けたチェックを傍受し、他のエージェ ントに向けそれをリプレイする必要がある。次に、その応答を傍受し、同様にそれをリプレイする必要がある。

この攻撃は、攻撃者が偽の候補者によって識別されない限り、非常に困難である。これは、攻撃者が2つの異なるホストから送信されたパケットを傍受し、再生する必要があるためである。両方のエージェントが異なるネットワーク（例えば、公衆インターネットを横断する）にいる場合、この攻撃はネットワークの異なる部分にある2つのエンドポイントに対して同時に発生する必要があるため、調整が困難となる可能性があります。

攻撃者自身が偽の候補によって識別される場合、攻撃は調整しやすくなる。ただし、データパスが保護されている場合(SRTP (Secure Real-time Transport Protocol) [RFC3711]を使用するなど)、攻撃者はデータパケットを処理できず、廃棄する ことしかできないため、データストリームを効果的に無効化することができ る。ただし、この攻撃では、接続性チェックがターゲットに到達するのをブロック するために、エージェントがパケットを破壊する必要がある。その場合、データストリームを中断させることが目的であれば、ICEを攻撃するよりも、同じ仕組みで中断させるだけの方がはるかに簡単です。

19.3.サーバ・リフレクティブ・アドレス・ギャザリングへの攻撃
ICEエンドポイントは、STUNサーバーからサーバー反射型候補を収集するためにSTUNバインディングリクエストを使用します。これらのリクエストはどのような形でも認証されない。そのため、攻撃者がクライアントに偽のサーバー反射候補を提供するために使用できる多くのテクニックが存在する。

o 攻撃者はDNSを侵害し、DNSクエリが不正なSTUNサーバーのアドレスを返すようにすることができます。そのサーバーはクライアントに偽のサーバー反射候補を提供することができる。この攻撃はDNSセキュリティによって軽減されるが、DNSSECはこの攻撃に対処するために必要ではない。

o STUNメッセージを観察できる攻撃者（Wi-Fiのような共有ネットワークセグメント上の攻撃者など）は、有効でクライアントに受け入れられるような偽の応答を注入することができます。

o 攻撃者はSTUNサーバーを危険にさらし、不正なマッピングされたアドレスで応答を送信させることができます。

これらの攻撃によって学習された偽のマップ付きアドレスは、ICEセッションの確立にお いて、サーバー反射の候補として使用される。この候補が実際にデータに使用されるには、攻撃者は接続性チェックも攻撃する必要があり、特に偽の候補に偽の有効性を強制する必要がある。この攻撃は、セッションの各ICEエージェントが生成するチェックを攻 撃する必要があり、攻撃者自身を特定するとSRTPによって阻止されるため、偽 のアドレスが第4パーティ(イニシエータ、レスポンダ、攻撃者のいずれもない) を特定すると、非常に困難である。

攻撃者が接続性チェックを攻撃しないことを選択した場合、攻撃者ができる最悪の事態は、サーバー反射型候補が使用されるのを防ぐことである。しかし、攻撃を受けているエージェントから到達可能な候補が少なくとも1つあれば、STUN接続性チェック自体が、データ交換に使用できるピアリフレクティブ候補を提供することになる。ピアリフレックス候補は一般に、サーバリフレックス候補よりも優先されます。そのため、STUNアドレスの収集のみに対する攻撃は、通常セッションに全く影響を及ぼさない。

19.4.中継候補者集めへの攻撃
攻撃者は、中継候補の収集を妨害し、クライアントに偽の中継候補がいると思わせることを試みるかもしれない。TURNサーバーとのやりとりは、長期間のクレデンシャルを使用して認証される。その結果、偽の応答やリクエストの注入はうまくいかない。さらに、バインディングリクエストとは異なり、アロケートリクエストは、ソースIPアドレスとポートがクライアントにそのリレーされた候補を提供するために利用されないので、変更されたソースIPアドレスとポートによるリプレイ攻撃には影響されない。

攻撃者がクライアントに偽の中継候補を信じさせたとしても、接続性チェックが成功した場合にのみ、そのような候補が使用されることになる。したがって、攻撃者は上記のように偽の候補に対して偽の有効性を打ち出す必要があり、これは調整するのが非常に困難な攻撃となります。

19.5.インサイダー攻撃
ICEでは、第三者が偽の候補者情報やSTUNメッセージを挿入しようとする攻撃に加えて、攻撃者が認証された有効なICE取引参加者である場合に可能な攻撃もある。

19.5.1.STUNアンプリファイア攻撃
STUN増幅攻撃は、攻撃者が他のエージェントに音声パケットを攻撃対象に向けさせる「ボイスハンマー」攻撃と類似しています。しかし、音声パケットがターゲットに向けられるのではなく、STUN接続性チェックがターゲットに向けられます。攻撃者は大量の候補、例えば50個を送信します。応答エージェントは候補情報を受信し、ターゲットに向けられたチェックを開始し、その結果、応答が発生することはありません。WebRTCの場合、ユーザーが取得した悪意のあるJavaScriptコードによってバックグラウンドで攻撃が開始される可能性があるため、ユーザーはこの攻撃が進行していることに気づかないかもしれません。回答者は、Ta msごとに（たとえばTa=50ms）新しい接続性チェックを開始する。しかし、候補が多いため再送タイマは大きく設定される。その結果、パケットはTaミリ秒に1回の間隔で送信され、その後は間隔が長くなっていく。したがって、STUNは、データが送信されるよりも速いレートでパケットを送信することはなく、STUNパケットは、ICEがセッションのために失敗するまで、わずかな時間だけ存続する。それにもかかわらず、これは増幅メカニズムである。

増幅をなくすことは不可能であるが、さまざまなヒューリスティックに よって、その量を減らすことができる。ICEエージェントは、実行する接続性チェックの合計数を100に制限すべきである(SHOULD)。さらに、エージェントは受け入れる候補者の数を制限してもよい(MAY)。

この種の攻撃を回避したいプロトコルは、次のメッセージを送信する前に、イニシエータが応答を待つことを強制することがよくある。しかし、ICEの場合、これは不可能である。以下の2つのケースを区別することは不可能である。

o 反応がないのは、イニシエータが応答しない無防備なターゲットに対して DoS 攻撃を仕掛けるために使用されているためです。

o IPアドレスとポートがイニシエータから到達できないため、応答がありませんでした。

後者の場合は、次の機会に再度小切手を送付し、前者の場合は、それ以降小切手を送付しない。

20.IANA の検討事項
ICEオリジナル仕様では、4つのSTUN属性と1つの新しいSTUNエラー応答が登録されている。STUN属性とエラー応答は、ここに再現される。また、本仕様では、新たにICEオプションを登録した。

20.1.STUN 属性
IANAは4つのSTUN属性を登録している。

0x0024 PRIORITY 0x0025 USE-CANDIDATE 0x8029 ICE-CONTROLLED 0x802A ICE-CONTROLLING

20.2.STUNエラーレスポンス
IANA は以下の STUN エラー応答コードを登録した。

487 役割の競合。クライアントは、サーバーの役割と競合するICE役割（制御またはコントロール）を主張した。

20.3.ICEオプション
IANAは、[RFC6336]で定義された手順に従って、以下のICEオプションを「Interactive Connectivity Establishment（ICE）」レジストリの「ICE Options」サブレジストリに登録しました。

ICE オプション名：ice2

連絡先名前IESG Email: iesg@ietf.org

チェンジコントローラー：IESG

説明ICEオプションは、ICEオプションを使用するICEエージェントがRFC8445に従って実装されていることを示す。

参考文献RFC 8445

21.RFC5245からの変更点
このICE仕様の更新の目的は、以下の通りです。

o RFC5245の手順を明確にする。

o RFC5245の欠陥の発見と、RFC5245に基づくICEアプリケーションを実装・展開したコミュニティからのフィードバックによる技術的な変更を行う。

o SIPおよびSDPの手順を削除することで、手順をシグナリングプロトコル から独立させる。シグナリングプロトコルに固有の手順は、別の用法文書で定義される。[ICE-SIP-SDP]は、SIPとSDPでのICEの使用法を定義する。

以下の技術的な変更を行いました。

o アグレッシブ・ノミネーションを削除した。

o ペア候補の状態計算と接続性チェックのスケジューリングの手順を修正した。

o TaとRTOの計算手順が変更された。

o アクティブチェックリストとフローズンチェックリストの定義が削除されました。

o 'ice2' ICE オプションを追加しました。

o IPv6に関する考察を修正しました。

o キープアライブに対する no-op の使用法、および非 ICE ピアとのキープアライブが削除されました。

22.参考文献
22.1.規範となる参考文献
[RFC2119] Bradner, S., "Key words for use in RFCs to Indicate Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/RFC2119, March 1997, <https://www.rfc-editor.org/info/rfc2119>.

[RFC4941] Narten, T., Draves, R., and S. Krishnan, "Privacy Extensions for Stateless Address Autoconfiguration in IPv6", RFC 4941, DOI 10.17487/RFC4941, September 2007, <https://www.rfc-editor.org/info/rfc4941>.

[RFC5389] Rosenberg, J., Mahy, R., Matthews, P., and D. Wing, "Session Traversal Utilities for NAT (STUN)", RFC 5389, DOI 10.17487/RFC5389, October 2008, <https://www.rfc-editor.org/info/rfc5389>.

[RFC5766] Mahy, R., Matthews, P., and J. Rosenberg, "Traversal Using Relays around NAT (TURN):Session Traversal Utilities for NAT (STUN)へのリレー拡張", RFC 5766, DOI 10.17487/RFC5766, April 2010, <https://www.rfc-editor.org/info/rfc5766>.

[RFC6336] Westerlund, M. and C. Perkins, "IANA Registry for Interactive Connectivity Establishment (ICE) Options", RFC 6336, DOI 10.17487/RFC6336, July 2011, <https://www.rfc-editor.org/info/rfc6336>.

[RFC6724] Thaler, D., Ed., Draves, R., Matsumoto, A., and T. Chown, "Default Address Selection for Internet Protocol Version 6 (IPv6)", RFC 6724, DOI 10.17487/RFC6724, September 2012, <https://www.rfc-editor.org/info/rfc6724>.

[RFC8174] Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174, May 2017, <https://www.rfc-editor.org/info/rfc8174>.

22.2.参考文献
[ICE-SIP-SDP] Petit-Huguenin, M., Nandakumar, S., and A. Keranen, "Session Description Protocol (SDP) Offer/Answer procedures for Interactive Connectivity Establishment (ICE)", Work in Progress, draft-ietf-mmusic-ice-sip-sdp-21, June 2018.

[RFC1918] Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G., and E. Lear, "Address Allocation for Private Internets", BCP 5, RFC 1918, DOI 10.17487/RFC1918, February 1996, <https://www.rfc-editor.org/info/rfc1918>.

[RFC2475] Blake, S., Black, D., Carlson, M., Davies, E., Wang, Z., and W. Weiss, "An Architecture for Differentiated Services", RFC 2475, DOI 10.17487/RFC2475, December 1998, <https://www.rfc-editor.org/info/rfc2475>.

[RFC3102] Borella, M., Lo, J., Grabelsky, D., and G. Montenegro, "Realm Specific IP: Framework", RFC 3102, DOI 10.17487/RFC3102, October 2001, <https://www.rfc-editor.org/info/rfc3102>.

[RFC3103] Borella, M., Grabelsky, D., Lo, J., and K. Taniguchi, "Realm Specific IP: Protocol Specification", RFC 3103, DOI 10.17487/RFC3103, October 2001, <https://www.rfc-editor.org/info/rfc3103>.

[RFC3235] Senie, D., "Network Address Translator (NAT) -Friendly Application Design Guidelines", RFC 3235, DOI 10.17487/RFC3235, January 2002, <https://www.rfc-editor.org/info/rfc3235>.

[RFC3261] Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A., Peterson, J., Sparks, R., Handley, M., and E. Schooler, "SIP: Session Initiation Protocol", RFC 3261, DOI 10.17487/RFC3261, June 2002, <https://www.rfc-editor.org/info/rfc3261>.

[RFC3264] Rosenberg, J. and H. Schulzrinne, "An Offer/Answer Model with Session Description Protocol (SDP)", RFC 3264, DOI 10.17487/RFC3264, June 2002, <https://www.rfc-editor.org/info/rfc3264>.

[RFC3303] Srisuresh, P., Kuthan, J., Rosenberg, J., Molitor, A., and A. Rayhan, "Middlebox communication architecture and framework", RFC 3303, DOI 10.17487/RFC3303, August 2002, <https://www.rfc-editor.org/info/rfc3303>.

[RFC3424] Daigle, L., Ed. and IAB, "IAB Considerations for UNilateral Self-Address Fixing (UNSAF) Across Network Address Translation", RFC 3424, DOI 10.17487/RFC3424, November 2002, <https://www.rfc-editor.org/info/rfc3424>.

[RFC3489] Rosenberg, J., Weinberger, J., Huitema, C., and R. Mahy, "STUN - Simple Traversal of User Datagram Protocol (UDP) Through Network Address Translators (NATs)", RFC 3489, DOI 10.17487/RFC3489, March 2003, <https://www.rfc-editor.org/info/rfc3489>.

[RFC3550] Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson, "RTP: A Transport Protocol for Real-Time Applications", STD 64, RFC 3550, DOI 10.17487/RFC3550, July 2003, <https://www.rfc-editor.org/info/rfc3550>.

[RFC3605] Huitema, C., "Real Time Control Protocol (RTCP) attribute in Session Description Protocol (SDP)", RFC 3605, DOI 10.17487/RFC3605, October 2003, <https://www.rfc-editor.org/info/rfc3605>.

[RFC3711] Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K. Norrman, "The Secure Real-time Transport Protocol (SRTP)", RFC 3711, DOI 10.17487/RFC3711, March 2004, <https://www.rfc-editor.org/info/rfc3711>.

[RFC3725] Rosenberg, J., Peterson, J., Schulzrinne, H., and G. Camarillo, "Best Current Practices for Third Party Call Control (3pcc) in the Session Initiation Protocol (SIP)", BCP 85, RFC 3725, DOI 10.17487/RFC3725, April 2004, <https://www.rfc-editor.org/info/rfc3725>.

[RFC3879] Huitema, C. and B. Carpenter, "Deprecating Site Local Addresses", RFC 3879, DOI 10.17487/RFC3879, September 2004, <https://www.rfc-editor.org/info/rfc3879>.

[RFC4038] Shin, M-K., Ed., Hong, Y-G., Hagino, J., Savola, P., and E. Castro, "Application Aspects of IPv6 Transition", RFC 4038, DOI 10.17487/RFC4038, March 2005, <https://www.rfc-editor.org/info/rfc4038>.

[RFC4091] Camarillo, G. and J. Rosenberg, "The Alternative Network Address Types (ANAT) Semantics for Session Description Protocol (SDP) Grouping Framework", RFC 4091, DOI 10.17487/RFC4091, June 2005, <https://www.rfc-editor.org/info/rfc4091>.

[RFC4092] Camarillo, G. and J. Rosenberg, "Usage of Session Description Protocol (SDP) Alternative Network Address Types (ANAT) Semantics in Session Initiation Protocol (SIP)", RFC 4092, DOI 10.17487/RFC4092, June 2005, <https://www.rfc-editor.org/info/rfc4092>.

[RFC4103] Hellstrom, G. and P. Jones, "RTP Payload for Text Conversation", RFC 4103, DOI 10.17487/RFC4103, June 2005, <https://www.rfc-editor.org/info/rfc4103>.

[RFC4291] Hinden, R. and S. Deering, "IP Version 6 Addressing Architecture", RFC 4291, DOI 10.17487/RFC4291, 2006年2月, <https://www.rfc-editor.org/info/rfc4291>.

[RFC4566] Handley, M., Jacobson, V., and C. Perkins, "SDP:Session Description Protocol", RFC 4566, DOI 10.17487/RFC4566, July 2006, <https://www.rfc-editor.org/info/rfc4566>.

[RFC4787] Audet, F., Ed. and C. Jennings, "Network Address Translation (NAT) Behavioral Requirements for Unicast UDP", BCP 127, RFC 4787, DOI 10.17487/RFC4787, January 2007, <https://www.rfc-editor.org/info/rfc4787>.

[RFC5245] Rosenberg, J., "Interactive Connectivity Establishment (ICE):A Protocol for Network Address Translator (NAT) Traversal for Offer/Answer Protocols", RFC 5245, DOI 10.17487/RFC5245, April 2010, <https://www.rfc-editor.org/info/rfc5245>.

[RFC5382] Guha, S., Ed., Biswas, K., Ford, B., Sivakumar, S., and P. Srisuresh, "NAT Behavioral Requirements for TCP", BCP 142, RFC 5382, DOI 10.17487/RFC5382, October 2008, <https://www.rfc-editor.org/info/rfc5382>.

[RFC5761] Perkins, C. and M. Westerlund, "Multiplexing RTP Data and Control Packets on Single Port", RFC 5761, DOI 10.17487/RFC5761, April 2010, <https://www.rfc-editor.org/info/rfc5761>.

[RFC6080] Petrie, D. and S. Channabasappa, Ed., "A Framework for Session Initiation Protocol User Agent Profile Delivery", RFC 6080, DOI 10.17487/RFC6080, March 2011, <https://www.rfc-editor.org/info/rfc6080>.

[RFC6146] Bagnulo, M., Matthews, P., and I. van Beijnum, "Stateful NAT64:Bagnulo M. Matthew P. and I. van Beijnum, "Network Address and Protocol Translation from IPv6 Clients to IPv4 Servers", RFC 6146, DOI 10.17487/RFC6146, April 2011, <https://www.rfc-editor.org/info/rfc6146>.

[RFC6147] Bagnulo, M., Sullivan, A., Matthews, P., and I. van Beijnum, "DNS64:DNS Extensions for Network Address Translation from IPv6 Clients to IPv4 Servers", RFC 6147, DOI 10.17487/RFC6147, April 2011, <https://www.rfc-editor.org/info/rfc6147>.

[RFC6298] Paxson, V., Allman, M., Chu, J., and M. Sargent, "Computing TCP's Retransmission Timer", RFC 6298, DOI 10.17487/RFC6298, June 2011, <https://www.rfc-editor.org/info/rfc6298>.

[RFC6544] Rosenberg, J., Keranen, A., Lowekamp, B., and A. Roach, "TCP Candidates with Interactive Connectivity Establishment (ICE)", RFC 6544, DOI 10.17487/RFC6544, March 2012, <https://www.rfc-editor.org/info/rfc6544>.

[RFC6928] Chu, J., Dukkipati, N., Cheng, Y., and M. Mathis, "Increasing TCP's Initial Window", RFC 6928, DOI 10.17487/RFC6928, April 2013, <https://www.rfc-editor.org/info/rfc6928>.

[RFC7050] Savolainen, T., Korhonen, J., and D. Wing, "Discovery of IPv6 Prefix Used for IPv6 Address Synthesis", RFC 7050, DOI 10.17487/RFC7050, November 2013, <https://www.rfc-editor.org/info/rfc7050>.

[RFC7721] Cooper, A., Gont, F., and D. Thaler, "Security and Privacy Considerations for IPv6 Address Generation Mechanisms", RFC 7721, DOI 10.17487/RFC7721, March 2016, <https://www.rfc-editor.org/info/rfc7721>.

[RFC7825】Goldberg, J., Westerlund, M., and T. Zeng, "A Network Address Translator (NAT) Traversal Mechanism for Media Controlled by Real-Time Streaming Protocol (RTSP)", RFC 7825, DOI 10.17487/RFC7825, December 2016, <https://www.rfc-editor.org/info/rfc7825>.

[RFC8421] Martinsen, P., Reddy, T., and P. Patil, "Interactive Connectivity Establishment (ICE) Multihomed and IPv4/IPv6 Dual-Stack Guidelines", RFC 8421, DOI 10.17487/RFC8421, July 2018, <https://www.rfc-editor.org/info/rfc8421>.

[WebRTC-IP-HANDLING] Uberti, J. and G. Shieh, "WebRTC IP Address Handling Requirements", Work in Progress, draft-ietf-rtcweb-ip-handling-09, June 2018.

付録A．ライト版とフル版の実装
ICEは、2種類の実装を許可している。完全な実装は、セッションにおける制御側と被制御側の役割をサポートし、アドレス収集も実行できる。これに対して、lite実装は、STUNチェックに応答する以外はほとんど何もしない最小限の実装であり、セッションにおける制御される役割のみをサポートする。

ICEは、どちらかのエンドポイントに利益をもたらすために、両方のエンドポイントがそれをサポートする必要があるため、ネットワークにおけるICEの段階的な展開はより複雑です。多くのセッションは、それ自体がNATの背後になく、NATトラバーサルを心配しないエンドポイントを含んでいます。非常に一般的なケースは、NATトラバーサルを必要とするエンドポイント（VoIPハードフォンやソフトフォンなど）が、これらのデバイスのいずれかに電話をかけることです。電話がICEのフル実装をサポートしていても、もう一方のデバイスがサポートしていなければ、ICEは全く使用されません。liteの実装は、これらのデバイスのための低コストなエントリーポイントを可能にします。Lite実装をサポートすれば、フル実装のデバイスに接続し、ICEのメリットをフルに享受することができます。

したがって、Lite版の実装は、常に公衆インターネットに接続され、任意の通信相手からパケットを受信できる公衆IPアドレスを持っているデバイスにのみ適しています。ICEは、Lite実装がNATの背後に置かれた場合、機能しません。

ICEは、ライト実装が1つのIPv4ホスト候補と複数のIPv6アドレスを持つことを許可する。その場合、本仕様で推奨されるRFC6724のような静的アルゴリズムを使用 して、制御エージェントによって候補ペアが選択される。しかし、アドレス選択のための静的メカニズムは、実際のトポロジーを反映したり、接続性の実際の保証を提供することができないため、常にエラーが発生しやすい。それらは常に発見的である。したがって、ICEエージェントがIPv4アドレスとIPv6アドレスを選択するためだけにICEを実装し、そのIPアドレスがどれもNATの後ろにない場合、可能な限り最も堅牢なアドレス選択形式を提供するために、フルICEの使用は依然として推奨されています(RECOMMENDED)。

本仕様に追加されたlite実装は、フル実装への足がかりとなるものであることに留意することが重要である。単一のIPv4アドレスで常に公衆インターネットに接続されている機器であっても、達成可能であれば、完全な実装が望まれる。完全な実装は、NATトラバーサルとは無関係のICEのセキュリティ上の利点も得ることができる。最後に、今日パブリックアドレスを持つデバイスが、明日にはNATの背後にあるネットワークに配置されることはよくあることである。デバイスや製品の寿命が尽きるまで、それが常にパブリックインターネット上で使用されるかどうかを決定的に知ることは困難である。完全な実装は、通信が常に機能することを保証するものである。

付録B.設計動機
ICEには、それ自体は単純であっても、複雑で明白でない考え方や使用例から派生した、さらなる議論に値する規範的な動作が数多く含まれています。これらの設計動機は、実装のために理解する必要はないため、ここで議論する。この付録は非規範的なものである。

B.1.STUNトランザクションのペーシング
候補を収集し接続性を確認するために使用されるSTUNトランザクションは、およそTaミリ秒ごとに1つの新しいトランザクションの割合でペースアウトされる。各トランザクションは、同様にTaの関数である再送信タイマーRTOを持つ。なぜこのようなトランザクションのペースがあるのか、またなぜこのような公式が使われているのか。

これらのSTUNリクエストの送信は、クライアントとSTUNサーバーの間のNATデバイスにバインディングを作成する効果があることが多い。経験上、多くのNATデバイスは、新しいバインディングを作成するレートに上限があることが示されている。この仕様の作業中にIETF ICE WGで行われた議論では、5ミリ秒に1回の割合が十分にサポートされているとの結論に達した。このため、Taは5msという下限を設けている。さらに、ネットワーク上でのこれらのパケットの送信は帯域幅を使用するため、ICEエ ージェントによってレートが制限される必要があります。RFC5245]の以前のドラフトバージョンに基づく配備は、ネットワークに負 の影響を与えるだけでなく、レート制限のあるアクセスリンクに過負荷をかけ、全体 としてパフォーマンスが悪くなる傾向がありました。その結果、ペーシングによって、NATデバイスが過負荷にならず、トラフィックが適切なレートに維持されることが保証されます。

妥当な」レートの定義は、データが流れ始めると、STUNはRTP自体が使用す る帯域幅よりも多くの帯域幅を使用してはならない[MUST NOT]ということであ る。Taの式は、STUNパケットがTa秒ごとに送信される場合、すべてのデータスト リームで合計すると、RTPパケットと同じ量の帯域幅を消費するように設計されてい る。もちろん、STUNには再送信があり、再送信のペースも考慮する必要がある。このため、RTOは、最初のトランザクションの最初の再送が、最後のト ランザクションの最初のSTUNリクエストが発生したときに発生するように設定さ れている。図解

ファーストパケット再送信

                    | |
                    | |
             ------- + ------ ------- + ------
            / \ / \
           / \ / \
        
           +-+ +-+ +-+ +-+ +-+ +-+
           | A1 | | B1 | | C1 | | A2 | | B2 | | C2 |
           +-+ +-+ +-+ +-+ +-+ +-+
        
        --- + ------- + ------- + ------- + ------- + ------- + ------ ------時間
           0 Ta 2Ta 3Ta 4Ta 5Ta

この図では、送信されるトランザクションが3つある(たとえば、候補者収集の場合、ホスト候補とSTUNサーバーのペアは3つある)。最初のトランザクション（パケットA2）の最初の再送が時間3Taに送信されるように、再送タイマーが設定されている。

STUNは再送に指数関数的なバックオフを使用するため、最初の再送の後の後続の再送は、Taミリ秒間隔よりもさらに少ない頻度で発生します。

このグローバルな最小ペーシング間隔5msというメカニズムは、一般にトランスポートプロトコルには適用できないが、以下の理由に基づきICEには適用可能である。

o トランスポートプロトコルに一般的に適用されるであろう、以下のルールから始めましょう。

1.RFC6928]のセクション2で定義されているように、MaxBytesを起動時にネッ トワークで許可される最大バイト数(14600であるべき)とする。

2.HTOをトランザクションタイムアウトとする。これは、RTTが既知の場合は 2*RTT、そうでない場合は500ミリ秒であるべきである[SHOULD]。これは、[RFC5389]のSTUNメッセージのRTOと、[RFC6298]のTCP初期RTO(1秒)に基づ くものである。

3.トランザクション間の最小ペーシング間隔をMinPacingとすると、5msである（上記参照）。

o エージェントは通常、ICEトランザクション(特に接続性チェック)のRTTを知らないので、HTOはほとんど常に500ミリ秒になることを観察してください。

o MinPacingを5ミリ秒、HTOを500ミリ秒にすると、最大で100パケット/HTOになり、120バイト未満の典型的なICEチェックでは、ネットワーク内の最大未処理バイトが12000になり、ルール1が示す最大値よりも小さくなることを観察してください。

o したがって、ICEの場合、ルールセットはMinPacingルールだけになり、グローバルなTa値を持つことと同じになります。

B.2.複数の塩基を持つ候補
5.1.3節では、トランスポートアドレスとベースが同じ候補を排除すること について述べている。しかし、トランスポートアドレスが同じでベースが異なる候補は、冗長ではない。ICEエージェントが、同じIPアドレスとポートを持ちながら、ベースが異なる2つの候補を 持つことができるのは、どのような場合か？図11のトポロジーを考えてみましょう。

          + ---------- +
          | STUN Srvr |
          + ---------- +
               |
               |
             -----
           // \\
          | |
         | B：net10 |
          | |
           \\ //
             -----
               |
               |
          + ---------- +
          | NAT |
          + ---------- +
               |
               |
             -----
           // \\
          | A |
         | 192.168 / 16 |
          | |
           \\ //
             -----
               |
               |
               | 192.168.1.100 -----
          + ---------- + // \\ + ---------- +
          | | | | | |
          | イニシエーター| --------- | C：net10 | ----------- | レスポンダー|
          | | 10.0.1.100 | | 10.0.1.101 | |
          + ---------- + \\ // + ---------- +
                                   -----
        
図11：異なるベースを持つ同一の候補

この場合、開始エージェントはマルチホームである。それは、ネット10のプライベートネットワークであるネットワークC上に、10.0.1.100という1つのIPアドレスを持っている。応答エージェントは、この同じネットワーク上にある。開始エージェントは、192.168/16のネットワークAにも接続されており、192.168.1.100のIPアドレスを持っています。このネットワークにはNATがあり、別のネット10のプライベートネットワークであるネットワークBにNATしているが、ネットワークCには接続されていない。

開始エージェントは、ネットワークCのIPアドレス上のホスト候補（10.0.1.100：2498）と、ネットワークAのIPアドレス上のホスト候補（192.168.1.100：3344）を取得します。192.168.1.100:3344から設定されたSTUNサーバーにSTUNクエリーを実行します。このクエリはNATを通過し、NATはバインディング10.0.1.100:2498を割り当てます。STUNサーバーはこれをSTUNバインディングレスポンスに反映させます。ここで、開始エージェントは、ホスト候補(10.0.1.100:2498)と同じトランスポートアドレスを持つ サーバーリフレクティブ候補を取得したことになる。ただし、サーバー反射候補のベースは192.168.1.100:3344であり、ホスト候補のベースは10.0.1.100:2498である。

B.3.Related-Address属性とRelated-Port属性の目的
candidate属性には、ICE自身ではまったく使用されない2つの値、related addressとrelated portが含まれています。なぜこのような値があるのでしょうか？

搭載の動機は2つある。一つ目は、診断的なものである。異なるタイプの候補の関係を知ることは非常に有用である。これを含めることで、ICEエージェントは、どの中継候補がどの反射候補に 関連しているかを知ることができ、さらにその反射候補が特定のホスト候補に関連 していることを知ることができる。ある候補のチェックは成功するが、他の候補のチェックは成功しない場合、これはネットワークで何が起こっているかについての有用な診断を提供する。

2 つ目の理由は、オフパスの QoS (Quality-of-Service) 機構に関係するものである。PacketCable 2.0 のような環境で ICE を使用する場合、プロキシは通常の SIP 処理に加えて、SIP メッセージの SDP を検査し、データトラフィックの IP アドレスとポートを抽出します。そして、ポリシーサーバーを通じて、ネットワーク上のアクセスルーターと対話し、データフローに対して保証されたQoSを確立することができる。この QoS は，RTP トラフィックを 5 タプルにもとづき分類し，保証されたレートを提供する か，DSCP を適切にマークすることによって提供される．住宅用NATが存在し、データ用に中継候補が選択された場合、この中継候補は実際のTURNサーバー上のトランスポートアドレスとなる。このアドレスは、QoS処理のためにパケットを分類するために使用されるアクセスルータ内の実際のトランスポートアドレスについては何も述べていない。むしろ、TURNサーバーに向けたサーバー反射的な候補が必要である。SDPで変換を伝えることで、プロキシはアクセスルータにQoSを要求するた めにそのトランスポートアドレスを使用することができる。

B.4.STUN ユーザー名の重要性
ICEは、短期クレデンシャル機能を使用したSTUNによるメッセージの完全性の使用を要求する。実際の短期クレデンシャルは、候補交換でユーザー名の断片を交換することで形成される。このメカニズムの必要性は、単なるセキュリティにとどまらず、そもそもICEを正しく動作させるために実際に必要なものです。

LとRは、10.0.0.0/8を使用する民間企業1に所属している。Zは民間企業2に所属し、こちらも10.0.0.0/8を使用しています。結局、RとZはどちらもIPアドレス10.0.1.1を持っている。LはZに候補を送り、Zはそのホスト候補をLに返信する。この場合、その候補は10.0.1.1:8866と10.0.1.1:8877である。結論から言うと、Rも同じ時間にセッション中であり、10.0.1.1:8866と10.0.1.1:8877をホスト候補として使っている。つまり、RはZと同じように、これらのポートでSTUNメッセージを受け入れる用意がある。Lは10.0.1.1:8866と10.0.1.1:8877にSTUNリクエストを送信する。しかし、これらは期待されたようにZに行きません。代わりに、Rに行くのだ!もしRがそれらに返信すれば、LはZに接続していると信じるだろうが、実際にはまったく別のユーザーであるRに接続している。これを解決するために、STUN短期信用メカニズムが使用される。ユーザー名の断片は十分にランダムであるため、RがZと同じ値を使用する可能性は 非常に低い。その結果、信用証明書が無効であるため、RはSTUNリクエストを拒否 する。要するに、STUNユーザー名断片は、候補交換の一部として確立された特定の セッションにバインドされた、一時的なホスト識別子の形式を提供するのである。

IPアドレスの非一意性の残念な結果として、上記の例では、RはICEエージェントでさえないかもしれない。それは任意のホストであり、STUNパケットが向けられるポートはそのホスト上の任意の一時的なポートである可能性がある。このソケットでパケットを待ち受けているアプリケーションがあり、それがどんなプロトコルの不正なパケットを処理する準備ができていない場合、そのアプリケーションの動作に影響を与える可能性がある。幸い、交換されるポートは一時的で、通常は動的または登録された範囲から選ばれるので、そのポートはホストR上のサーバを実行するために使われるのではなく、何らかのプロトコルのエージェント側である可能性が高い。このため、この範囲でのポートの使用は一時的なものであるため、割り当てられたポートにヒットする確率は低くなる。しかし、問題が発生する可能性があるため、ネットワーク導入者はそれに対する備えが必要である。これはICEに特有の問題ではなく、どのような種類のプロトコルでも、特に公衆インターネット上のプロトコルでは、浮遊パケットがいつでもポートに到達する可能性があることに注意してください。この要件は、インターネットアプリケーションの一般的な設計ガイドラインを再掲したものに過ぎない。

B.5.候補ペアの優先順位計算式
候補ペアの優先順位は、奇妙な形をしている。それは

      ペア優先度 = 2^32*MIN(G,D) + 2*MAX(G,D) + (G>D?1:0)        
これはなぜか？候補のペアがこの値に基づいてソートされるとき、結果として得られるソートはMAX/MINの特性を持ちます。これは、ペアはまず2つの優先順位のうち最小の値の減少に基づいてソートされることを意味します。優先度の最小値が同じペアは、優先度の最大値でソートされます。優先度の最大値と最小値が同じ場合は、式の最後の部分で、制御エージェントの優先度がタイブレーカーとして使用されます。1つの候補の優先度は常に2*32より小さいため、2*32の係数が使用され、結果としてペアの優先度は2つのコンポーネントの優先度の「連結」となる。これにより、MAX/MINソートが作成されます。MAX/MINは、特定のICEエージェントに対して、優先度の高い候補がすべて試されるまで、優先度の低い候補が決して使用されないことを保証する。

B.6.なぜキープアライブが必要なのか？
候補ペア上でデータが流れ始めると、セッションの期間中、中間NATでバインディ ングをアライブに保つことが依然として必要である。通常、データストリームパケット自体(たとえば、RTP)がこの目的に適う。ただし、いくつかのケースは、さらに検討する価値がある。第1に、SIPなど一部のRTP用途では、データストリームを「保留」にするこ とができる。これは、RFC 3264 [RFC3264]に定義されているように、SDPの「sendonly」または「inactive」 属性を使用することで実現できる。RFC 3264は、このような場合、データの送信を停止するよう実装に指示し ている。ただし、そうすることで、NATバインディングがタイムアウトし、 データが保留されなくなる可能性がある。

第2に、テキスト会話用のペイロード形式[RFC4103]など、一部のRTPペイロード 形式は、パケットの送信頻度が低すぎて、NATバインディングのタイムアウトを 超える可能性がある。

第三に、無音状態を抑制する場合、無音時間が長くなると、NATバインディングがタイムアウトするほどデータ転送が停止することがある。

これらの理由から、データパケットそのものを信頼することはできない。ICEは、STUNバインディング・インジケーションを利用したシンプルな定期的キープアライブを定義しています。このため、ICEの帯域幅要件は非常に予測可能であり、QoS予約に適しています。

B.7.なぜピアリフレクティブな候補者を好むのか？
セクション5.1.2では、タイプおよびローカルプリファレンスに基づいて候補の優先度を計算する手順について説明しています。そのセクションでは、peer-reflexiveな候補のタイププリファレンスは常にserver reflexiveよりも高くなることが要求されています。それはなぜでしょうか。その理由は、セクション19のセキュリティに関する考察と関係がある。攻撃者は、ICEエージェントに、偽のpeer-reflexive候補よりも偽のserver-reflexive候補を使用 させる方がはるかに簡単である。その結果、バインディングリクエストによるアドレス収集に対する攻撃は、 ICEによってピアリフレクティブ候補を優先することで阻止される。

B.8.なぜバインドインディケーションはキープアライブに使われるのですか？
データキーパライブについては、セクション11で説明する。これらのキープアライブは、両方のエンドポイントがICE可能な場合、STUNを使用 する。ただし、バインドリクエストトランザクション(これは応答を生成する)ではなく、 キープアライブはインジケーションを使用する。それはなぜか？

その主な理由は、ネットワークのQoSメカニズムに関係しています。データが流れ始めると、ネットワークエレメントはデータストリームがかなり規則的な構造を持っていると仮定し、一定の間隔で定期的なパケットを使用し、ジッタの可能性があることを想定しています。ICEエージェントがデータパケットを送信しているときにバインド要求を受信した場合、データパケットと一緒に応答パケットを生成する必要があります。これは、データパケットを運ぶ5タプルの実際の帯域幅要件を増加させ、これらのパケットの配信にジッタを導入することになります。分析によると、これはデータ用にかなり厳しいパケットスケジューラを使用している特定のレイヤー2アクセスネットワークで懸念されることが示されています。

さらに、バインディング・インジケーションを使用すると、整合性を無効にすることができ、その結果、パフォーマンスが向上する可能性があります。これは、公衆交換電話網（PSTN）ゲートウェイやセッションボーダーコントローラー（SBC）などの大規模なエンドポイントに有効です。

B.9.候補者タイプの優先順位を選択する
タイプやローカルプリファレンス値を選択する基準のひとつに、TURNサーバ、VPNサーバなどのトンネルサービス、NATなどのデータ仲介の利用がある。データ中継器を使用すると、その候補にデータを送信する場合、まずデータ中継器を経由してから受信されることになる。データ仲介を伴う候補の1つが中継される候補です。もう一つのタイプはホスト候補で、これはVPNインターフェースから取得される。データがデータ仲介者を経由する場合、送信と受信の間のレイテンシにプラスまたはマイナスの影響を与える可能性があります。ルーターのホップ数が増えるため、パケットロスが増えることもあれば、増えないこともある。プロバイダーが運営するデータ中継施設にデータが転送され、そこから戻ってくるため、サービス提供のコストが増加する可能性があります。これらの懸念が重要である場合、中継候補のタイププリファレンスを慎重に選択する必要があります。

プリファレンスを選択するもう一つの基準は、IPアドレスファミリです。ICEはIPv4とIPv6の両方で動作します。ICEは、デュアルスタックホストがIPv6上の接続を好むが、v6ネットワークが切断 された場合にIPv4にフォールバックすることを可能にする、移行メカニズムを提供 する。壊れたパスが存在する場合、接続性チェックフェーズの過剰な遅延を避けるために、実装は [RFC8421]のガイドラインに従うべきである[SHOULD]。

また、プリファレンスを選択する基準として、トポロジーを意識することもあります。これは、仲介者を利用する候補に有益である。このような場合、ICEエージェントが仲介者のトポロジカルな近さに関する知識をあらかじめ設定しているか、動的に発見していれば、それを使ってより近い仲介者から得られた候補に高いローカルなプリファレンスを割り当てることができる。

また、セキュリティやプライバシーの観点からも、プリファレンスを選択することができます。あるユーザーが在宅勤務者で、企業ネットワークとローカルのホームネットワークに接続している場合、企業内で通信するときは音声トラフィックを企業ネットワーク上に維持し、企業外のユーザーと通信するときはローカルネットワークを使用するために、VPNなどのトンネルを介してルーティングすることを好むかもしれません。このような場合、VPNアドレスは他のどのアドレスよりも高いローカル優先度を持つことになります。

付録C．接続性-帯域幅の確認
以下の表は、IPv4およびIPv6において、異なるTa値（単位はms）と異なるufragサイズ（単位はバイト）を使用して、接続性チェックの実行に必要な帯域幅を示したものです。

この結果は、2016年4月11日にJusin Uberti（Google）より提供されたものです。

                     IPバージョン：IPv4
                     パケット長（バイト）：108 + ufrag
                          |
                       ms | 4 8 12 16
                     ----- | ------------------------
                      500 | 1.86k 1.98k 2.11k 2.24k
                      200 | 4.64k 4.96k 5.28k 5.6k
                      100 | 9.28k 9.92k 10.6k 11.2k
                       50 | 18.6k 19.8k 21.1k 22.4k
                       20 | 46.4k 49.6k 52.8k 56.0k
                       10 | 92.8k 99.2k 105k 112k
                        5 | 185k 198k 211k 224k
                        2 | 464k 496k 528k 560k
                        1 | 928k 992k 1.06M 1.12M
        
                     IPバージョン：IPv6
                     パケット長（バイト）：128 + ufrag
                          |
                       ms | 4 8 12 16
                     ----- | ------------------------
                      500 | 2.18k 2.3k 2.43k 2.56k
                      200 | 5.44k 5.76k 6.08k 6.4k
                      100 | 10.9k 11.5k 12.2k 12.8k
                       50 | 21.8k 23.0k 24.3k 25.6k
                       20 | 54.4k 57.6k 60.8k 64.0k
                       10 | 108k 115k 121k 128k
                        5 | 217k 230k 243k 256k
                        2 | 544k 576k 608k 640k
                        1 | 1.09M 1.15M 1.22M 1.28M
                        
                        図12：接続性-帯域幅の確認

謝辞

この文書のテキストのほとんどは、ICEのオリジナル仕様であるRFC5245に由来しています。この文書に貢献されたすべての方に感謝します。この仕様の改訂にさらに貢献した、Emil Ivov、Paul Kyzivat、Pal-Erik Martinsen、Simon Perrault、Eric Rescorla、Thomas Stach、Peter Thatcher、 Martin Thomson、Justin Uberti、Suhas Nandakumar、Taylor Brandstetter、 Peter Saint-Andre、Harald Alvestrand、Roman Shpountに感謝の意を表した いと思います。Ben Campbell は AD レビューを担当しました。Stephen Farrell が sec-dir のレビューを担当しました。Stewart Bryant が gen-art レビューを担当しました。Qin We が Ops-dir のレビューを担当しました。Magnus Westerlund が tsv-art のレビューを行いました。

著者住所

Ari Keranen Ericsson Hirsalantie 11 02420 Jorvas Finland

   電子メール：ari.keranen@ericsson.com        
Christer Holmberg Ericsson Hirsalantie 11 02420 Jorvas Finland

   電子メール：christer.holmberg@ericsson.com        
Jonathan Rosenberg jdrosen.net Monmouth, NJ United States of America

   電子メール：jdrosen@jdrosen.net URI：http://www.jdrosen.net        